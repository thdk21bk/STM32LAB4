
LAB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080031c4  080031c4  000131c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031f0  080031f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080031f0  080031f0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031f0  080031f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031f0  080031f0  000131f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031f4  080031f4  000131f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  08003204  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08003204  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0b5  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb2  00000000  00000000  0002e0ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  0002ffa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  00030cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172f9  00000000  00000000  00031988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e707  00000000  00000000  00048c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008942e  00000000  00000000  00057388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e07b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003780  00000000  00000000  000e080c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080031ac 	.word	0x080031ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080031ac 	.word	0x080031ac

0800014c <timerRun>:
}
void setTimer4(int duration){
	timer4_counter = duration;
	timer4_flag = 0;
}
void timerRun(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000150:	4b21      	ldr	r3, [pc, #132]	; (80001d8 <timerRun+0x8c>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b00      	cmp	r3, #0
 8000156:	dd0b      	ble.n	8000170 <timerRun+0x24>
		timer1_counter--;
 8000158:	4b1f      	ldr	r3, [pc, #124]	; (80001d8 <timerRun+0x8c>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	3b01      	subs	r3, #1
 800015e:	4a1e      	ldr	r2, [pc, #120]	; (80001d8 <timerRun+0x8c>)
 8000160:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8000162:	4b1d      	ldr	r3, [pc, #116]	; (80001d8 <timerRun+0x8c>)
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	2b00      	cmp	r3, #0
 8000168:	dc02      	bgt.n	8000170 <timerRun+0x24>
			timer1_flag = 1;
 800016a:	4b1c      	ldr	r3, [pc, #112]	; (80001dc <timerRun+0x90>)
 800016c:	2201      	movs	r2, #1
 800016e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 8000170:	4b1b      	ldr	r3, [pc, #108]	; (80001e0 <timerRun+0x94>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	2b00      	cmp	r3, #0
 8000176:	dd0b      	ble.n	8000190 <timerRun+0x44>
		timer2_counter--;
 8000178:	4b19      	ldr	r3, [pc, #100]	; (80001e0 <timerRun+0x94>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	3b01      	subs	r3, #1
 800017e:	4a18      	ldr	r2, [pc, #96]	; (80001e0 <timerRun+0x94>)
 8000180:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8000182:	4b17      	ldr	r3, [pc, #92]	; (80001e0 <timerRun+0x94>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	2b00      	cmp	r3, #0
 8000188:	dc02      	bgt.n	8000190 <timerRun+0x44>
			timer2_flag = 1;
 800018a:	4b16      	ldr	r3, [pc, #88]	; (80001e4 <timerRun+0x98>)
 800018c:	2201      	movs	r2, #1
 800018e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 8000190:	4b15      	ldr	r3, [pc, #84]	; (80001e8 <timerRun+0x9c>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	2b00      	cmp	r3, #0
 8000196:	dd0b      	ble.n	80001b0 <timerRun+0x64>
		timer3_counter--;
 8000198:	4b13      	ldr	r3, [pc, #76]	; (80001e8 <timerRun+0x9c>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	3b01      	subs	r3, #1
 800019e:	4a12      	ldr	r2, [pc, #72]	; (80001e8 <timerRun+0x9c>)
 80001a0:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 80001a2:	4b11      	ldr	r3, [pc, #68]	; (80001e8 <timerRun+0x9c>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	dc02      	bgt.n	80001b0 <timerRun+0x64>
			timer3_flag = 1;
 80001aa:	4b10      	ldr	r3, [pc, #64]	; (80001ec <timerRun+0xa0>)
 80001ac:	2201      	movs	r2, #1
 80001ae:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 80001b0:	4b0f      	ldr	r3, [pc, #60]	; (80001f0 <timerRun+0xa4>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	dd0b      	ble.n	80001d0 <timerRun+0x84>
		timer4_counter--;
 80001b8:	4b0d      	ldr	r3, [pc, #52]	; (80001f0 <timerRun+0xa4>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	3b01      	subs	r3, #1
 80001be:	4a0c      	ldr	r2, [pc, #48]	; (80001f0 <timerRun+0xa4>)
 80001c0:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 80001c2:	4b0b      	ldr	r3, [pc, #44]	; (80001f0 <timerRun+0xa4>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	dc02      	bgt.n	80001d0 <timerRun+0x84>
			timer4_flag = 1;
 80001ca:	4b0a      	ldr	r3, [pc, #40]	; (80001f4 <timerRun+0xa8>)
 80001cc:	2201      	movs	r2, #1
 80001ce:	601a      	str	r2, [r3, #0]
		}
	}
}
 80001d0:	bf00      	nop
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	20000028 	.word	0x20000028
 80001dc:	2000002c 	.word	0x2000002c
 80001e0:	20000030 	.word	0x20000030
 80001e4:	20000034 	.word	0x20000034
 80001e8:	20000038 	.word	0x20000038
 80001ec:	2000003c 	.word	0x2000003c
 80001f0:	20000040 	.word	0x20000040
 80001f4:	20000044 	.word	0x20000044

080001f8 <HAL_UART_RxCpltCallback>:
After the character is sent to the terminal, the interrupt is activated again.
+ Verify the UART communication channel: sending back any character received from the terminal => Loop-back communication
*/

uint8_t temp = 0;
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART2){
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a08      	ldr	r2, [pc, #32]	; (8000228 <HAL_UART_RxCpltCallback+0x30>)
 8000206:	4293      	cmp	r3, r2
 8000208:	d10a      	bne.n	8000220 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 800020a:	2332      	movs	r3, #50	; 0x32
 800020c:	2201      	movs	r2, #1
 800020e:	4907      	ldr	r1, [pc, #28]	; (800022c <HAL_UART_RxCpltCallback+0x34>)
 8000210:	4807      	ldr	r0, [pc, #28]	; (8000230 <HAL_UART_RxCpltCallback+0x38>)
 8000212:	f002 f977 	bl	8002504 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000216:	2201      	movs	r2, #1
 8000218:	4904      	ldr	r1, [pc, #16]	; (800022c <HAL_UART_RxCpltCallback+0x34>)
 800021a:	4805      	ldr	r0, [pc, #20]	; (8000230 <HAL_UART_RxCpltCallback+0x38>)
 800021c:	f002 f9f5 	bl	800260a <HAL_UART_Receive_IT>
	}
}
 8000220:	bf00      	nop
 8000222:	3708      	adds	r7, #8
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	40004400 	.word	0x40004400
 800022c:	20000048 	.word	0x20000048
 8000230:	200000c4 	.word	0x200000c4

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 faa2 	bl	8000780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f80e 	bl	800025c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f910 	bl	8000464 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000244:	f000 f85a 	bl	80002fc <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000248:	f000 f8e2 	bl	8000410 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800024c:	f000 f894 	bl	8000378 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 8000250:	4801      	ldr	r0, [pc, #4]	; (8000258 <main+0x24>)
 8000252:	f001 fd6f 	bl	8001d34 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000256:	e7fe      	b.n	8000256 <main+0x22>
 8000258:	2000007c 	.word	0x2000007c

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b094      	sub	sp, #80	; 0x50
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000266:	2228      	movs	r2, #40	; 0x28
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f002 ff96 	bl	800319c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000270:	f107 0314 	add.w	r3, r7, #20
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	605a      	str	r2, [r3, #4]
 800027a:	609a      	str	r2, [r3, #8]
 800027c:	60da      	str	r2, [r3, #12]
 800027e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028c:	2302      	movs	r3, #2
 800028e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000290:	2301      	movs	r3, #1
 8000292:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000294:	2310      	movs	r3, #16
 8000296:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000298:	2300      	movs	r3, #0
 800029a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002a0:	4618      	mov	r0, r3
 80002a2:	f001 f833 	bl	800130c <HAL_RCC_OscConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80002ac:	f000 f916 	bl	80004dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b0:	230f      	movs	r3, #15
 80002b2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b4:	2300      	movs	r3, #0
 80002b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c4:	f107 0314 	add.w	r3, r7, #20
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f001 fa9e 	bl	800180c <HAL_RCC_ClockConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80002d6:	f000 f901 	bl	80004dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002da:	2302      	movs	r3, #2
 80002dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80002de:	2300      	movs	r3, #0
 80002e0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	4618      	mov	r0, r3
 80002e6:	f001 fc1f 	bl	8001b28 <HAL_RCCEx_PeriphCLKConfig>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002f0:	f000 f8f4 	bl	80004dc <Error_Handler>
  }
}
 80002f4:	bf00      	nop
 80002f6:	3750      	adds	r7, #80	; 0x50
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}

080002fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	605a      	str	r2, [r3, #4]
 800030a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800030c:	4b18      	ldr	r3, [pc, #96]	; (8000370 <MX_ADC1_Init+0x74>)
 800030e:	4a19      	ldr	r2, [pc, #100]	; (8000374 <MX_ADC1_Init+0x78>)
 8000310:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000312:	4b17      	ldr	r3, [pc, #92]	; (8000370 <MX_ADC1_Init+0x74>)
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000318:	4b15      	ldr	r3, [pc, #84]	; (8000370 <MX_ADC1_Init+0x74>)
 800031a:	2201      	movs	r2, #1
 800031c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800031e:	4b14      	ldr	r3, [pc, #80]	; (8000370 <MX_ADC1_Init+0x74>)
 8000320:	2200      	movs	r2, #0
 8000322:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000324:	4b12      	ldr	r3, [pc, #72]	; (8000370 <MX_ADC1_Init+0x74>)
 8000326:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800032a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800032c:	4b10      	ldr	r3, [pc, #64]	; (8000370 <MX_ADC1_Init+0x74>)
 800032e:	2200      	movs	r2, #0
 8000330:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000332:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <MX_ADC1_Init+0x74>)
 8000334:	2201      	movs	r2, #1
 8000336:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000338:	480d      	ldr	r0, [pc, #52]	; (8000370 <MX_ADC1_Init+0x74>)
 800033a:	f000 fa83 	bl	8000844 <HAL_ADC_Init>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000344:	f000 f8ca 	bl	80004dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000348:	2300      	movs	r3, #0
 800034a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800034c:	2301      	movs	r3, #1
 800034e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000350:	2300      	movs	r3, #0
 8000352:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	4619      	mov	r1, r3
 8000358:	4805      	ldr	r0, [pc, #20]	; (8000370 <MX_ADC1_Init+0x74>)
 800035a:	f000 fb4b 	bl	80009f4 <HAL_ADC_ConfigChannel>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000364:	f000 f8ba 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000368:	bf00      	nop
 800036a:	3710      	adds	r7, #16
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	2000004c 	.word	0x2000004c
 8000374:	40012400 	.word	0x40012400

08000378 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b086      	sub	sp, #24
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800037e:	f107 0308 	add.w	r3, r7, #8
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800038c:	463b      	mov	r3, r7
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000394:	4b1d      	ldr	r3, [pc, #116]	; (800040c <MX_TIM2_Init+0x94>)
 8000396:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800039a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800039c:	4b1b      	ldr	r3, [pc, #108]	; (800040c <MX_TIM2_Init+0x94>)
 800039e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80003a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a4:	4b19      	ldr	r3, [pc, #100]	; (800040c <MX_TIM2_Init+0x94>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80003aa:	4b18      	ldr	r3, [pc, #96]	; (800040c <MX_TIM2_Init+0x94>)
 80003ac:	2209      	movs	r2, #9
 80003ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b0:	4b16      	ldr	r3, [pc, #88]	; (800040c <MX_TIM2_Init+0x94>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003b6:	4b15      	ldr	r3, [pc, #84]	; (800040c <MX_TIM2_Init+0x94>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003bc:	4813      	ldr	r0, [pc, #76]	; (800040c <MX_TIM2_Init+0x94>)
 80003be:	f001 fc69 	bl	8001c94 <HAL_TIM_Base_Init>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80003c8:	f000 f888 	bl	80004dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003d2:	f107 0308 	add.w	r3, r7, #8
 80003d6:	4619      	mov	r1, r3
 80003d8:	480c      	ldr	r0, [pc, #48]	; (800040c <MX_TIM2_Init+0x94>)
 80003da:	f001 fdff 	bl	8001fdc <HAL_TIM_ConfigClockSource>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80003e4:	f000 f87a 	bl	80004dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003e8:	2300      	movs	r3, #0
 80003ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ec:	2300      	movs	r3, #0
 80003ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003f0:	463b      	mov	r3, r7
 80003f2:	4619      	mov	r1, r3
 80003f4:	4805      	ldr	r0, [pc, #20]	; (800040c <MX_TIM2_Init+0x94>)
 80003f6:	f001 ffcb 	bl	8002390 <HAL_TIMEx_MasterConfigSynchronization>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000400:	f000 f86c 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000404:	bf00      	nop
 8000406:	3718      	adds	r7, #24
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	2000007c 	.word	0x2000007c

08000410 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000414:	4b11      	ldr	r3, [pc, #68]	; (800045c <MX_USART2_UART_Init+0x4c>)
 8000416:	4a12      	ldr	r2, [pc, #72]	; (8000460 <MX_USART2_UART_Init+0x50>)
 8000418:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800041a:	4b10      	ldr	r3, [pc, #64]	; (800045c <MX_USART2_UART_Init+0x4c>)
 800041c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000420:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000422:	4b0e      	ldr	r3, [pc, #56]	; (800045c <MX_USART2_UART_Init+0x4c>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000428:	4b0c      	ldr	r3, [pc, #48]	; (800045c <MX_USART2_UART_Init+0x4c>)
 800042a:	2200      	movs	r2, #0
 800042c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800042e:	4b0b      	ldr	r3, [pc, #44]	; (800045c <MX_USART2_UART_Init+0x4c>)
 8000430:	2200      	movs	r2, #0
 8000432:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000434:	4b09      	ldr	r3, [pc, #36]	; (800045c <MX_USART2_UART_Init+0x4c>)
 8000436:	220c      	movs	r2, #12
 8000438:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800043a:	4b08      	ldr	r3, [pc, #32]	; (800045c <MX_USART2_UART_Init+0x4c>)
 800043c:	2200      	movs	r2, #0
 800043e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000440:	4b06      	ldr	r3, [pc, #24]	; (800045c <MX_USART2_UART_Init+0x4c>)
 8000442:	2200      	movs	r2, #0
 8000444:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000446:	4805      	ldr	r0, [pc, #20]	; (800045c <MX_USART2_UART_Init+0x4c>)
 8000448:	f002 f80c 	bl	8002464 <HAL_UART_Init>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000452:	f000 f843 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	200000c4 	.word	0x200000c4
 8000460:	40004400 	.word	0x40004400

08000464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046a:	f107 0308 	add.w	r3, r7, #8
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000478:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <MX_GPIO_Init+0x5c>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a10      	ldr	r2, [pc, #64]	; (80004c0 <MX_GPIO_Init+0x5c>)
 800047e:	f043 0304 	orr.w	r3, r3, #4
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <MX_GPIO_Init+0x5c>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0304 	and.w	r3, r3, #4
 800048c:	607b      	str	r3, [r7, #4]
 800048e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	2120      	movs	r1, #32
 8000494:	480b      	ldr	r0, [pc, #44]	; (80004c4 <MX_GPIO_Init+0x60>)
 8000496:	f000 ff21 	bl	80012dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800049a:	2320      	movs	r3, #32
 800049c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049e:	2301      	movs	r3, #1
 80004a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a2:	2300      	movs	r3, #0
 80004a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a6:	2302      	movs	r3, #2
 80004a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80004aa:	f107 0308 	add.w	r3, r7, #8
 80004ae:	4619      	mov	r1, r3
 80004b0:	4804      	ldr	r0, [pc, #16]	; (80004c4 <MX_GPIO_Init+0x60>)
 80004b2:	f000 fd99 	bl	8000fe8 <HAL_GPIO_Init>

}
 80004b6:	bf00      	nop
 80004b8:	3718      	adds	r7, #24
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40021000 	.word	0x40021000
 80004c4:	40010800 	.word	0x40010800

080004c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim ){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	timerRun();
 80004d0:	f7ff fe3c 	bl	800014c <timerRun>
}
 80004d4:	bf00      	nop
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}

080004dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e0:	b672      	cpsid	i
}
 80004e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <Error_Handler+0x8>
	...

080004e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ee:	4b15      	ldr	r3, [pc, #84]	; (8000544 <HAL_MspInit+0x5c>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	4a14      	ldr	r2, [pc, #80]	; (8000544 <HAL_MspInit+0x5c>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6193      	str	r3, [r2, #24]
 80004fa:	4b12      	ldr	r3, [pc, #72]	; (8000544 <HAL_MspInit+0x5c>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <HAL_MspInit+0x5c>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	4a0e      	ldr	r2, [pc, #56]	; (8000544 <HAL_MspInit+0x5c>)
 800050c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000510:	61d3      	str	r3, [r2, #28]
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <HAL_MspInit+0x5c>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800051e:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <HAL_MspInit+0x60>)
 8000520:	685b      	ldr	r3, [r3, #4]
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_MspInit+0x60>)
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr
 8000544:	40021000 	.word	0x40021000
 8000548:	40010000 	.word	0x40010000

0800054c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000554:	f107 0310 	add.w	r3, r7, #16
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a14      	ldr	r2, [pc, #80]	; (80005b8 <HAL_ADC_MspInit+0x6c>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d121      	bne.n	80005b0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800056c:	4b13      	ldr	r3, [pc, #76]	; (80005bc <HAL_ADC_MspInit+0x70>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a12      	ldr	r2, [pc, #72]	; (80005bc <HAL_ADC_MspInit+0x70>)
 8000572:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b10      	ldr	r3, [pc, #64]	; (80005bc <HAL_ADC_MspInit+0x70>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000584:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <HAL_ADC_MspInit+0x70>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a0c      	ldr	r2, [pc, #48]	; (80005bc <HAL_ADC_MspInit+0x70>)
 800058a:	f043 0304 	orr.w	r3, r3, #4
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <HAL_ADC_MspInit+0x70>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0304 	and.w	r3, r3, #4
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800059c:	2301      	movs	r3, #1
 800059e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005a0:	2303      	movs	r3, #3
 80005a2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	4619      	mov	r1, r3
 80005aa:	4805      	ldr	r0, [pc, #20]	; (80005c0 <HAL_ADC_MspInit+0x74>)
 80005ac:	f000 fd1c 	bl	8000fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005b0:	bf00      	nop
 80005b2:	3720      	adds	r7, #32
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40012400 	.word	0x40012400
 80005bc:	40021000 	.word	0x40021000
 80005c0:	40010800 	.word	0x40010800

080005c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005d4:	d113      	bne.n	80005fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005d6:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <HAL_TIM_Base_MspInit+0x44>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <HAL_TIM_Base_MspInit+0x44>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	61d3      	str	r3, [r2, #28]
 80005e2:	4b09      	ldr	r3, [pc, #36]	; (8000608 <HAL_TIM_Base_MspInit+0x44>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	201c      	movs	r0, #28
 80005f4:	f000 fc0f 	bl	8000e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005f8:	201c      	movs	r0, #28
 80005fa:	f000 fc28 	bl	8000e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40021000 	.word	0x40021000

0800060c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000614:	f107 0310 	add.w	r3, r7, #16
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a1f      	ldr	r2, [pc, #124]	; (80006a4 <HAL_UART_MspInit+0x98>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d137      	bne.n	800069c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800062c:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <HAL_UART_MspInit+0x9c>)
 800062e:	69db      	ldr	r3, [r3, #28]
 8000630:	4a1d      	ldr	r2, [pc, #116]	; (80006a8 <HAL_UART_MspInit+0x9c>)
 8000632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000636:	61d3      	str	r3, [r2, #28]
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <HAL_UART_MspInit+0x9c>)
 800063a:	69db      	ldr	r3, [r3, #28]
 800063c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000644:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <HAL_UART_MspInit+0x9c>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a17      	ldr	r2, [pc, #92]	; (80006a8 <HAL_UART_MspInit+0x9c>)
 800064a:	f043 0304 	orr.w	r3, r3, #4
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <HAL_UART_MspInit+0x9c>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0304 	and.w	r3, r3, #4
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800065c:	2304      	movs	r3, #4
 800065e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000660:	2302      	movs	r3, #2
 8000662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000664:	2303      	movs	r3, #3
 8000666:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	4619      	mov	r1, r3
 800066e:	480f      	ldr	r0, [pc, #60]	; (80006ac <HAL_UART_MspInit+0xa0>)
 8000670:	f000 fcba 	bl	8000fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000674:	2308      	movs	r3, #8
 8000676:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000680:	f107 0310 	add.w	r3, r7, #16
 8000684:	4619      	mov	r1, r3
 8000686:	4809      	ldr	r0, [pc, #36]	; (80006ac <HAL_UART_MspInit+0xa0>)
 8000688:	f000 fcae 	bl	8000fe8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800068c:	2200      	movs	r2, #0
 800068e:	2100      	movs	r1, #0
 8000690:	2026      	movs	r0, #38	; 0x26
 8000692:	f000 fbc0 	bl	8000e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000696:	2026      	movs	r0, #38	; 0x26
 8000698:	f000 fbd9 	bl	8000e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800069c:	bf00      	nop
 800069e:	3720      	adds	r7, #32
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40004400 	.word	0x40004400
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40010800 	.word	0x40010800

080006b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <NMI_Handler+0x4>

080006b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ba:	e7fe      	b.n	80006ba <HardFault_Handler+0x4>

080006bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <MemManage_Handler+0x4>

080006c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <BusFault_Handler+0x4>

080006c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <UsageFault_Handler+0x4>

080006ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr

080006da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr

080006e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr

080006f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f6:	f000 f889 	bl	800080c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000704:	4802      	ldr	r0, [pc, #8]	; (8000710 <TIM2_IRQHandler+0x10>)
 8000706:	f001 fb61 	bl	8001dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	2000007c 	.word	0x2000007c

08000714 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000718:	4802      	ldr	r0, [pc, #8]	; (8000724 <USART2_IRQHandler+0x10>)
 800071a:	f001 ff9b 	bl	8002654 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	200000c4 	.word	0x200000c4

08000728 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000734:	f7ff fff8 	bl	8000728 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000738:	480b      	ldr	r0, [pc, #44]	; (8000768 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800073a:	490c      	ldr	r1, [pc, #48]	; (800076c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800073c:	4a0c      	ldr	r2, [pc, #48]	; (8000770 <LoopFillZerobss+0x16>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000740:	e002      	b.n	8000748 <LoopCopyDataInit>

08000742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000746:	3304      	adds	r3, #4

08000748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800074c:	d3f9      	bcc.n	8000742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074e:	4a09      	ldr	r2, [pc, #36]	; (8000774 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000750:	4c09      	ldr	r4, [pc, #36]	; (8000778 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000754:	e001      	b.n	800075a <LoopFillZerobss>

08000756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000758:	3204      	adds	r2, #4

0800075a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800075c:	d3fb      	bcc.n	8000756 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800075e:	f002 fcf9 	bl	8003154 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000762:	f7ff fd67 	bl	8000234 <main>
  bx lr
 8000766:	4770      	bx	lr
  ldr r0, =_sdata
 8000768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800076c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000770:	080031f8 	.word	0x080031f8
  ldr r2, =_sbss
 8000774:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000778:	20000110 	.word	0x20000110

0800077c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800077c:	e7fe      	b.n	800077c <ADC1_2_IRQHandler>
	...

08000780 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <HAL_Init+0x28>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a07      	ldr	r2, [pc, #28]	; (80007a8 <HAL_Init+0x28>)
 800078a:	f043 0310 	orr.w	r3, r3, #16
 800078e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000790:	2003      	movs	r0, #3
 8000792:	f000 fb35 	bl	8000e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000796:	200f      	movs	r0, #15
 8000798:	f000 f808 	bl	80007ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800079c:	f7ff fea4 	bl	80004e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40022000 	.word	0x40022000

080007ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_InitTick+0x54>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_InitTick+0x58>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4619      	mov	r1, r3
 80007be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fb4d 	bl	8000e6a <HAL_SYSTICK_Config>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e00e      	b.n	80007f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b0f      	cmp	r3, #15
 80007de:	d80a      	bhi.n	80007f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e0:	2200      	movs	r2, #0
 80007e2:	6879      	ldr	r1, [r7, #4]
 80007e4:	f04f 30ff 	mov.w	r0, #4294967295
 80007e8:	f000 fb15 	bl	8000e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007ec:	4a06      	ldr	r2, [pc, #24]	; (8000808 <HAL_InitTick+0x5c>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007f2:	2300      	movs	r3, #0
 80007f4:	e000      	b.n	80007f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000000 	.word	0x20000000
 8000804:	20000008 	.word	0x20000008
 8000808:	20000004 	.word	0x20000004

0800080c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <HAL_IncTick+0x1c>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	4b05      	ldr	r3, [pc, #20]	; (800082c <HAL_IncTick+0x20>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4413      	add	r3, r2
 800081c:	4a03      	ldr	r2, [pc, #12]	; (800082c <HAL_IncTick+0x20>)
 800081e:	6013      	str	r3, [r2, #0]
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	20000008 	.word	0x20000008
 800082c:	2000010c 	.word	0x2000010c

08000830 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return uwTick;
 8000834:	4b02      	ldr	r3, [pc, #8]	; (8000840 <HAL_GetTick+0x10>)
 8000836:	681b      	ldr	r3, [r3, #0]
}
 8000838:	4618      	mov	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr
 8000840:	2000010c 	.word	0x2000010c

08000844 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800084c:	2300      	movs	r3, #0
 800084e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d101      	bne.n	8000866 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
 8000864:	e0be      	b.n	80009e4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000870:	2b00      	cmp	r3, #0
 8000872:	d109      	bne.n	8000888 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2200      	movs	r2, #0
 8000878:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2200      	movs	r2, #0
 800087e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f7ff fe62 	bl	800054c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f000 f9ab 	bl	8000be4 <ADC_ConversionStop_Disable>
 800088e:	4603      	mov	r3, r0
 8000890:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000896:	f003 0310 	and.w	r3, r3, #16
 800089a:	2b00      	cmp	r3, #0
 800089c:	f040 8099 	bne.w	80009d2 <HAL_ADC_Init+0x18e>
 80008a0:	7dfb      	ldrb	r3, [r7, #23]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	f040 8095 	bne.w	80009d2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80008b0:	f023 0302 	bic.w	r3, r3, #2
 80008b4:	f043 0202 	orr.w	r2, r3, #2
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008c4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	7b1b      	ldrb	r3, [r3, #12]
 80008ca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008cc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008dc:	d003      	beq.n	80008e6 <HAL_ADC_Init+0xa2>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d102      	bne.n	80008ec <HAL_ADC_Init+0xa8>
 80008e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ea:	e000      	b.n	80008ee <HAL_ADC_Init+0xaa>
 80008ec:	2300      	movs	r3, #0
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	7d1b      	ldrb	r3, [r3, #20]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d119      	bne.n	8000930 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	7b1b      	ldrb	r3, [r3, #12]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d109      	bne.n	8000918 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	3b01      	subs	r3, #1
 800090a:	035a      	lsls	r2, r3, #13
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	4313      	orrs	r3, r2
 8000910:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	e00b      	b.n	8000930 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091c:	f043 0220 	orr.w	r2, r3, #32
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000928:	f043 0201 	orr.w	r2, r3, #1
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	430a      	orrs	r2, r1
 8000942:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	689a      	ldr	r2, [r3, #8]
 800094a:	4b28      	ldr	r3, [pc, #160]	; (80009ec <HAL_ADC_Init+0x1a8>)
 800094c:	4013      	ands	r3, r2
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	6812      	ldr	r2, [r2, #0]
 8000952:	68b9      	ldr	r1, [r7, #8]
 8000954:	430b      	orrs	r3, r1
 8000956:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000960:	d003      	beq.n	800096a <HAL_ADC_Init+0x126>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	689b      	ldr	r3, [r3, #8]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d104      	bne.n	8000974 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	691b      	ldr	r3, [r3, #16]
 800096e:	3b01      	subs	r3, #1
 8000970:	051b      	lsls	r3, r3, #20
 8000972:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800097a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	430a      	orrs	r2, r1
 8000986:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	689a      	ldr	r2, [r3, #8]
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <HAL_ADC_Init+0x1ac>)
 8000990:	4013      	ands	r3, r2
 8000992:	68ba      	ldr	r2, [r7, #8]
 8000994:	429a      	cmp	r2, r3
 8000996:	d10b      	bne.n	80009b0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a2:	f023 0303 	bic.w	r3, r3, #3
 80009a6:	f043 0201 	orr.w	r2, r3, #1
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009ae:	e018      	b.n	80009e2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b4:	f023 0312 	bic.w	r3, r3, #18
 80009b8:	f043 0210 	orr.w	r2, r3, #16
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c4:	f043 0201 	orr.w	r2, r3, #1
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80009cc:	2301      	movs	r3, #1
 80009ce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009d0:	e007      	b.n	80009e2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d6:	f043 0210 	orr.w	r2, r3, #16
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80009e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3718      	adds	r7, #24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	ffe1f7fd 	.word	0xffe1f7fd
 80009f0:	ff1f0efe 	.word	0xff1f0efe

080009f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009fe:	2300      	movs	r3, #0
 8000a00:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d101      	bne.n	8000a14 <HAL_ADC_ConfigChannel+0x20>
 8000a10:	2302      	movs	r3, #2
 8000a12:	e0dc      	b.n	8000bce <HAL_ADC_ConfigChannel+0x1da>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2201      	movs	r2, #1
 8000a18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	2b06      	cmp	r3, #6
 8000a22:	d81c      	bhi.n	8000a5e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685a      	ldr	r2, [r3, #4]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	4413      	add	r3, r2
 8000a34:	3b05      	subs	r3, #5
 8000a36:	221f      	movs	r2, #31
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	4019      	ands	r1, r3
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	6818      	ldr	r0, [r3, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685a      	ldr	r2, [r3, #4]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	4413      	add	r3, r2
 8000a4e:	3b05      	subs	r3, #5
 8000a50:	fa00 f203 	lsl.w	r2, r0, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	635a      	str	r2, [r3, #52]	; 0x34
 8000a5c:	e03c      	b.n	8000ad8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	2b0c      	cmp	r3, #12
 8000a64:	d81c      	bhi.n	8000aa0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685a      	ldr	r2, [r3, #4]
 8000a70:	4613      	mov	r3, r2
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	4413      	add	r3, r2
 8000a76:	3b23      	subs	r3, #35	; 0x23
 8000a78:	221f      	movs	r2, #31
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	4019      	ands	r1, r3
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	6818      	ldr	r0, [r3, #0]
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685a      	ldr	r2, [r3, #4]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	4413      	add	r3, r2
 8000a90:	3b23      	subs	r3, #35	; 0x23
 8000a92:	fa00 f203 	lsl.w	r2, r0, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	631a      	str	r2, [r3, #48]	; 0x30
 8000a9e:	e01b      	b.n	8000ad8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685a      	ldr	r2, [r3, #4]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	4413      	add	r3, r2
 8000ab0:	3b41      	subs	r3, #65	; 0x41
 8000ab2:	221f      	movs	r2, #31
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	4019      	ands	r1, r3
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	6818      	ldr	r0, [r3, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685a      	ldr	r2, [r3, #4]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	4413      	add	r3, r2
 8000aca:	3b41      	subs	r3, #65	; 0x41
 8000acc:	fa00 f203 	lsl.w	r2, r0, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b09      	cmp	r3, #9
 8000ade:	d91c      	bls.n	8000b1a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	68d9      	ldr	r1, [r3, #12]
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	4613      	mov	r3, r2
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	4413      	add	r3, r2
 8000af0:	3b1e      	subs	r3, #30
 8000af2:	2207      	movs	r2, #7
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	43db      	mvns	r3, r3
 8000afa:	4019      	ands	r1, r3
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	6898      	ldr	r0, [r3, #8]
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4613      	mov	r3, r2
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	4413      	add	r3, r2
 8000b0a:	3b1e      	subs	r3, #30
 8000b0c:	fa00 f203 	lsl.w	r2, r0, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	430a      	orrs	r2, r1
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	e019      	b.n	8000b4e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	6919      	ldr	r1, [r3, #16]
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4613      	mov	r3, r2
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	4413      	add	r3, r2
 8000b2a:	2207      	movs	r2, #7
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	4019      	ands	r1, r3
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	6898      	ldr	r0, [r3, #8]
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	4413      	add	r3, r2
 8000b42:	fa00 f203 	lsl.w	r2, r0, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b10      	cmp	r3, #16
 8000b54:	d003      	beq.n	8000b5e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b5a:	2b11      	cmp	r3, #17
 8000b5c:	d132      	bne.n	8000bc4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a1d      	ldr	r2, [pc, #116]	; (8000bd8 <HAL_ADC_ConfigChannel+0x1e4>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d125      	bne.n	8000bb4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d126      	bne.n	8000bc4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	689a      	ldr	r2, [r3, #8]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000b84:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2b10      	cmp	r3, #16
 8000b8c:	d11a      	bne.n	8000bc4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b8e:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <HAL_ADC_ConfigChannel+0x1e8>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a13      	ldr	r2, [pc, #76]	; (8000be0 <HAL_ADC_ConfigChannel+0x1ec>)
 8000b94:	fba2 2303 	umull	r2, r3, r2, r3
 8000b98:	0c9a      	lsrs	r2, r3, #18
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	4413      	add	r3, r2
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ba4:	e002      	b.n	8000bac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1f9      	bne.n	8000ba6 <HAL_ADC_ConfigChannel+0x1b2>
 8000bb2:	e007      	b.n	8000bc4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb8:	f043 0220 	orr.w	r2, r3, #32
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	40012400 	.word	0x40012400
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	431bde83 	.word	0x431bde83

08000be4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d12e      	bne.n	8000c5c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	689a      	ldr	r2, [r3, #8]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f022 0201 	bic.w	r2, r2, #1
 8000c0c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000c0e:	f7ff fe0f 	bl	8000830 <HAL_GetTick>
 8000c12:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000c14:	e01b      	b.n	8000c4e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000c16:	f7ff fe0b 	bl	8000830 <HAL_GetTick>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d914      	bls.n	8000c4e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d10d      	bne.n	8000c4e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c36:	f043 0210 	orr.w	r2, r3, #16
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c42:	f043 0201 	orr.w	r2, r3, #1
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e007      	b.n	8000c5e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d0dc      	beq.n	8000c16 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c84:	4013      	ands	r3, r2
 8000c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9a:	4a04      	ldr	r2, [pc, #16]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	60d3      	str	r3, [r2, #12]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	0a1b      	lsrs	r3, r3, #8
 8000cba:	f003 0307 	and.w	r3, r3, #7
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	db0b      	blt.n	8000cf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 021f 	and.w	r2, r3, #31
 8000ce4:	4906      	ldr	r1, [pc, #24]	; (8000d00 <__NVIC_EnableIRQ+0x34>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	095b      	lsrs	r3, r3, #5
 8000cec:	2001      	movs	r0, #1
 8000cee:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr
 8000d00:	e000e100 	.word	0xe000e100

08000d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	db0a      	blt.n	8000d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	490c      	ldr	r1, [pc, #48]	; (8000d50 <__NVIC_SetPriority+0x4c>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	0112      	lsls	r2, r2, #4
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	440b      	add	r3, r1
 8000d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d2c:	e00a      	b.n	8000d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4908      	ldr	r1, [pc, #32]	; (8000d54 <__NVIC_SetPriority+0x50>)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	3b04      	subs	r3, #4
 8000d3c:	0112      	lsls	r2, r2, #4
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	440b      	add	r3, r1
 8000d42:	761a      	strb	r2, [r3, #24]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000e100 	.word	0xe000e100
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	; 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f1c3 0307 	rsb	r3, r3, #7
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	bf28      	it	cs
 8000d76:	2304      	movcs	r3, #4
 8000d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	2b06      	cmp	r3, #6
 8000d80:	d902      	bls.n	8000d88 <NVIC_EncodePriority+0x30>
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3b03      	subs	r3, #3
 8000d86:	e000      	b.n	8000d8a <NVIC_EncodePriority+0x32>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43da      	mvns	r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da0:	f04f 31ff 	mov.w	r1, #4294967295
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	43d9      	mvns	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	4313      	orrs	r3, r2
         );
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3724      	adds	r7, #36	; 0x24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr

08000dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dcc:	d301      	bcc.n	8000dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00f      	b.n	8000df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <SysTick_Config+0x40>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dda:	210f      	movs	r1, #15
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f7ff ff90 	bl	8000d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <SysTick_Config+0x40>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dea:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <SysTick_Config+0x40>)
 8000dec:	2207      	movs	r2, #7
 8000dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	e000e010 	.word	0xe000e010

08000e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff ff2d 	bl	8000c68 <__NVIC_SetPriorityGrouping>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b086      	sub	sp, #24
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
 8000e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e28:	f7ff ff42 	bl	8000cb0 <__NVIC_GetPriorityGrouping>
 8000e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	68b9      	ldr	r1, [r7, #8]
 8000e32:	6978      	ldr	r0, [r7, #20]
 8000e34:	f7ff ff90 	bl	8000d58 <NVIC_EncodePriority>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff5f 	bl	8000d04 <__NVIC_SetPriority>
}
 8000e46:	bf00      	nop
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff35 	bl	8000ccc <__NVIC_EnableIRQ>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ffa2 	bl	8000dbc <SysTick_Config>
 8000e78:	4603      	mov	r3, r0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b085      	sub	sp, #20
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d008      	beq.n	8000eac <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2204      	movs	r2, #4
 8000e9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e020      	b.n	8000eee <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 020e 	bic.w	r2, r2, #14
 8000eba:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f022 0201 	bic.w	r2, r2, #1
 8000eca:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eda:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d005      	beq.n	8000f1c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2204      	movs	r2, #4
 8000f14:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	73fb      	strb	r3, [r7, #15]
 8000f1a:	e051      	b.n	8000fc0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 020e 	bic.w	r2, r2, #14
 8000f2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f022 0201 	bic.w	r2, r2, #1
 8000f3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a22      	ldr	r2, [pc, #136]	; (8000fcc <HAL_DMA_Abort_IT+0xd4>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d029      	beq.n	8000f9a <HAL_DMA_Abort_IT+0xa2>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a21      	ldr	r2, [pc, #132]	; (8000fd0 <HAL_DMA_Abort_IT+0xd8>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d022      	beq.n	8000f96 <HAL_DMA_Abort_IT+0x9e>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a1f      	ldr	r2, [pc, #124]	; (8000fd4 <HAL_DMA_Abort_IT+0xdc>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d01a      	beq.n	8000f90 <HAL_DMA_Abort_IT+0x98>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a1e      	ldr	r2, [pc, #120]	; (8000fd8 <HAL_DMA_Abort_IT+0xe0>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d012      	beq.n	8000f8a <HAL_DMA_Abort_IT+0x92>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a1c      	ldr	r2, [pc, #112]	; (8000fdc <HAL_DMA_Abort_IT+0xe4>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d00a      	beq.n	8000f84 <HAL_DMA_Abort_IT+0x8c>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a1b      	ldr	r2, [pc, #108]	; (8000fe0 <HAL_DMA_Abort_IT+0xe8>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d102      	bne.n	8000f7e <HAL_DMA_Abort_IT+0x86>
 8000f78:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f7c:	e00e      	b.n	8000f9c <HAL_DMA_Abort_IT+0xa4>
 8000f7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f82:	e00b      	b.n	8000f9c <HAL_DMA_Abort_IT+0xa4>
 8000f84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f88:	e008      	b.n	8000f9c <HAL_DMA_Abort_IT+0xa4>
 8000f8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8e:	e005      	b.n	8000f9c <HAL_DMA_Abort_IT+0xa4>
 8000f90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f94:	e002      	b.n	8000f9c <HAL_DMA_Abort_IT+0xa4>
 8000f96:	2310      	movs	r3, #16
 8000f98:	e000      	b.n	8000f9c <HAL_DMA_Abort_IT+0xa4>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	4a11      	ldr	r2, [pc, #68]	; (8000fe4 <HAL_DMA_Abort_IT+0xec>)
 8000f9e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	4798      	blx	r3
    } 
  }
  return status;
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40020008 	.word	0x40020008
 8000fd0:	4002001c 	.word	0x4002001c
 8000fd4:	40020030 	.word	0x40020030
 8000fd8:	40020044 	.word	0x40020044
 8000fdc:	40020058 	.word	0x40020058
 8000fe0:	4002006c 	.word	0x4002006c
 8000fe4:	40020000 	.word	0x40020000

08000fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b08b      	sub	sp, #44	; 0x2c
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ffa:	e148      	b.n	800128e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	69fa      	ldr	r2, [r7, #28]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	429a      	cmp	r2, r3
 8001016:	f040 8137 	bne.w	8001288 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	4aa3      	ldr	r2, [pc, #652]	; (80012ac <HAL_GPIO_Init+0x2c4>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d05e      	beq.n	80010e2 <HAL_GPIO_Init+0xfa>
 8001024:	4aa1      	ldr	r2, [pc, #644]	; (80012ac <HAL_GPIO_Init+0x2c4>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d875      	bhi.n	8001116 <HAL_GPIO_Init+0x12e>
 800102a:	4aa1      	ldr	r2, [pc, #644]	; (80012b0 <HAL_GPIO_Init+0x2c8>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d058      	beq.n	80010e2 <HAL_GPIO_Init+0xfa>
 8001030:	4a9f      	ldr	r2, [pc, #636]	; (80012b0 <HAL_GPIO_Init+0x2c8>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d86f      	bhi.n	8001116 <HAL_GPIO_Init+0x12e>
 8001036:	4a9f      	ldr	r2, [pc, #636]	; (80012b4 <HAL_GPIO_Init+0x2cc>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d052      	beq.n	80010e2 <HAL_GPIO_Init+0xfa>
 800103c:	4a9d      	ldr	r2, [pc, #628]	; (80012b4 <HAL_GPIO_Init+0x2cc>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d869      	bhi.n	8001116 <HAL_GPIO_Init+0x12e>
 8001042:	4a9d      	ldr	r2, [pc, #628]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d04c      	beq.n	80010e2 <HAL_GPIO_Init+0xfa>
 8001048:	4a9b      	ldr	r2, [pc, #620]	; (80012b8 <HAL_GPIO_Init+0x2d0>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d863      	bhi.n	8001116 <HAL_GPIO_Init+0x12e>
 800104e:	4a9b      	ldr	r2, [pc, #620]	; (80012bc <HAL_GPIO_Init+0x2d4>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d046      	beq.n	80010e2 <HAL_GPIO_Init+0xfa>
 8001054:	4a99      	ldr	r2, [pc, #612]	; (80012bc <HAL_GPIO_Init+0x2d4>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d85d      	bhi.n	8001116 <HAL_GPIO_Init+0x12e>
 800105a:	2b12      	cmp	r3, #18
 800105c:	d82a      	bhi.n	80010b4 <HAL_GPIO_Init+0xcc>
 800105e:	2b12      	cmp	r3, #18
 8001060:	d859      	bhi.n	8001116 <HAL_GPIO_Init+0x12e>
 8001062:	a201      	add	r2, pc, #4	; (adr r2, 8001068 <HAL_GPIO_Init+0x80>)
 8001064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001068:	080010e3 	.word	0x080010e3
 800106c:	080010bd 	.word	0x080010bd
 8001070:	080010cf 	.word	0x080010cf
 8001074:	08001111 	.word	0x08001111
 8001078:	08001117 	.word	0x08001117
 800107c:	08001117 	.word	0x08001117
 8001080:	08001117 	.word	0x08001117
 8001084:	08001117 	.word	0x08001117
 8001088:	08001117 	.word	0x08001117
 800108c:	08001117 	.word	0x08001117
 8001090:	08001117 	.word	0x08001117
 8001094:	08001117 	.word	0x08001117
 8001098:	08001117 	.word	0x08001117
 800109c:	08001117 	.word	0x08001117
 80010a0:	08001117 	.word	0x08001117
 80010a4:	08001117 	.word	0x08001117
 80010a8:	08001117 	.word	0x08001117
 80010ac:	080010c5 	.word	0x080010c5
 80010b0:	080010d9 	.word	0x080010d9
 80010b4:	4a82      	ldr	r2, [pc, #520]	; (80012c0 <HAL_GPIO_Init+0x2d8>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d013      	beq.n	80010e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010ba:	e02c      	b.n	8001116 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	623b      	str	r3, [r7, #32]
          break;
 80010c2:	e029      	b.n	8001118 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	3304      	adds	r3, #4
 80010ca:	623b      	str	r3, [r7, #32]
          break;
 80010cc:	e024      	b.n	8001118 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	3308      	adds	r3, #8
 80010d4:	623b      	str	r3, [r7, #32]
          break;
 80010d6:	e01f      	b.n	8001118 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	330c      	adds	r3, #12
 80010de:	623b      	str	r3, [r7, #32]
          break;
 80010e0:	e01a      	b.n	8001118 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d102      	bne.n	80010f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010ea:	2304      	movs	r3, #4
 80010ec:	623b      	str	r3, [r7, #32]
          break;
 80010ee:	e013      	b.n	8001118 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d105      	bne.n	8001104 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010f8:	2308      	movs	r3, #8
 80010fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69fa      	ldr	r2, [r7, #28]
 8001100:	611a      	str	r2, [r3, #16]
          break;
 8001102:	e009      	b.n	8001118 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001104:	2308      	movs	r3, #8
 8001106:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69fa      	ldr	r2, [r7, #28]
 800110c:	615a      	str	r2, [r3, #20]
          break;
 800110e:	e003      	b.n	8001118 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
          break;
 8001114:	e000      	b.n	8001118 <HAL_GPIO_Init+0x130>
          break;
 8001116:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	2bff      	cmp	r3, #255	; 0xff
 800111c:	d801      	bhi.n	8001122 <HAL_GPIO_Init+0x13a>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	e001      	b.n	8001126 <HAL_GPIO_Init+0x13e>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3304      	adds	r3, #4
 8001126:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	2bff      	cmp	r3, #255	; 0xff
 800112c:	d802      	bhi.n	8001134 <HAL_GPIO_Init+0x14c>
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	e002      	b.n	800113a <HAL_GPIO_Init+0x152>
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	3b08      	subs	r3, #8
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	210f      	movs	r1, #15
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	fa01 f303 	lsl.w	r3, r1, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	401a      	ands	r2, r3
 800114c:	6a39      	ldr	r1, [r7, #32]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	fa01 f303 	lsl.w	r3, r1, r3
 8001154:	431a      	orrs	r2, r3
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 8090 	beq.w	8001288 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001168:	4b56      	ldr	r3, [pc, #344]	; (80012c4 <HAL_GPIO_Init+0x2dc>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4a55      	ldr	r2, [pc, #340]	; (80012c4 <HAL_GPIO_Init+0x2dc>)
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	6193      	str	r3, [r2, #24]
 8001174:	4b53      	ldr	r3, [pc, #332]	; (80012c4 <HAL_GPIO_Init+0x2dc>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001180:	4a51      	ldr	r2, [pc, #324]	; (80012c8 <HAL_GPIO_Init+0x2e0>)
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	089b      	lsrs	r3, r3, #2
 8001186:	3302      	adds	r3, #2
 8001188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	220f      	movs	r2, #15
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	4013      	ands	r3, r2
 80011a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a49      	ldr	r2, [pc, #292]	; (80012cc <HAL_GPIO_Init+0x2e4>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d00d      	beq.n	80011c8 <HAL_GPIO_Init+0x1e0>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a48      	ldr	r2, [pc, #288]	; (80012d0 <HAL_GPIO_Init+0x2e8>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d007      	beq.n	80011c4 <HAL_GPIO_Init+0x1dc>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a47      	ldr	r2, [pc, #284]	; (80012d4 <HAL_GPIO_Init+0x2ec>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d101      	bne.n	80011c0 <HAL_GPIO_Init+0x1d8>
 80011bc:	2302      	movs	r3, #2
 80011be:	e004      	b.n	80011ca <HAL_GPIO_Init+0x1e2>
 80011c0:	2303      	movs	r3, #3
 80011c2:	e002      	b.n	80011ca <HAL_GPIO_Init+0x1e2>
 80011c4:	2301      	movs	r3, #1
 80011c6:	e000      	b.n	80011ca <HAL_GPIO_Init+0x1e2>
 80011c8:	2300      	movs	r3, #0
 80011ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011cc:	f002 0203 	and.w	r2, r2, #3
 80011d0:	0092      	lsls	r2, r2, #2
 80011d2:	4093      	lsls	r3, r2
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011da:	493b      	ldr	r1, [pc, #236]	; (80012c8 <HAL_GPIO_Init+0x2e0>)
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	089b      	lsrs	r3, r3, #2
 80011e0:	3302      	adds	r3, #2
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d006      	beq.n	8001202 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011f4:	4b38      	ldr	r3, [pc, #224]	; (80012d8 <HAL_GPIO_Init+0x2f0>)
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	4937      	ldr	r1, [pc, #220]	; (80012d8 <HAL_GPIO_Init+0x2f0>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	608b      	str	r3, [r1, #8]
 8001200:	e006      	b.n	8001210 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001202:	4b35      	ldr	r3, [pc, #212]	; (80012d8 <HAL_GPIO_Init+0x2f0>)
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	43db      	mvns	r3, r3
 800120a:	4933      	ldr	r1, [pc, #204]	; (80012d8 <HAL_GPIO_Init+0x2f0>)
 800120c:	4013      	ands	r3, r2
 800120e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d006      	beq.n	800122a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800121c:	4b2e      	ldr	r3, [pc, #184]	; (80012d8 <HAL_GPIO_Init+0x2f0>)
 800121e:	68da      	ldr	r2, [r3, #12]
 8001220:	492d      	ldr	r1, [pc, #180]	; (80012d8 <HAL_GPIO_Init+0x2f0>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	60cb      	str	r3, [r1, #12]
 8001228:	e006      	b.n	8001238 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800122a:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <HAL_GPIO_Init+0x2f0>)
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	43db      	mvns	r3, r3
 8001232:	4929      	ldr	r1, [pc, #164]	; (80012d8 <HAL_GPIO_Init+0x2f0>)
 8001234:	4013      	ands	r3, r2
 8001236:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d006      	beq.n	8001252 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001244:	4b24      	ldr	r3, [pc, #144]	; (80012d8 <HAL_GPIO_Init+0x2f0>)
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	4923      	ldr	r1, [pc, #140]	; (80012d8 <HAL_GPIO_Init+0x2f0>)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	604b      	str	r3, [r1, #4]
 8001250:	e006      	b.n	8001260 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001252:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <HAL_GPIO_Init+0x2f0>)
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	43db      	mvns	r3, r3
 800125a:	491f      	ldr	r1, [pc, #124]	; (80012d8 <HAL_GPIO_Init+0x2f0>)
 800125c:	4013      	ands	r3, r2
 800125e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d006      	beq.n	800127a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800126c:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <HAL_GPIO_Init+0x2f0>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4919      	ldr	r1, [pc, #100]	; (80012d8 <HAL_GPIO_Init+0x2f0>)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	600b      	str	r3, [r1, #0]
 8001278:	e006      	b.n	8001288 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <HAL_GPIO_Init+0x2f0>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	43db      	mvns	r3, r3
 8001282:	4915      	ldr	r1, [pc, #84]	; (80012d8 <HAL_GPIO_Init+0x2f0>)
 8001284:	4013      	ands	r3, r2
 8001286:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	3301      	adds	r3, #1
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	fa22 f303 	lsr.w	r3, r2, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	f47f aeaf 	bne.w	8000ffc <HAL_GPIO_Init+0x14>
  }
}
 800129e:	bf00      	nop
 80012a0:	bf00      	nop
 80012a2:	372c      	adds	r7, #44	; 0x2c
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	10320000 	.word	0x10320000
 80012b0:	10310000 	.word	0x10310000
 80012b4:	10220000 	.word	0x10220000
 80012b8:	10210000 	.word	0x10210000
 80012bc:	10120000 	.word	0x10120000
 80012c0:	10110000 	.word	0x10110000
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40010000 	.word	0x40010000
 80012cc:	40010800 	.word	0x40010800
 80012d0:	40010c00 	.word	0x40010c00
 80012d4:	40011000 	.word	0x40011000
 80012d8:	40010400 	.word	0x40010400

080012dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	807b      	strh	r3, [r7, #2]
 80012e8:	4613      	mov	r3, r2
 80012ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012ec:	787b      	ldrb	r3, [r7, #1]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012f2:	887a      	ldrh	r2, [r7, #2]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012f8:	e003      	b.n	8001302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012fa:	887b      	ldrh	r3, [r7, #2]
 80012fc:	041a      	lsls	r2, r3, #16
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	611a      	str	r2, [r3, #16]
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e26c      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 8087 	beq.w	800143a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800132c:	4b92      	ldr	r3, [pc, #584]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 030c 	and.w	r3, r3, #12
 8001334:	2b04      	cmp	r3, #4
 8001336:	d00c      	beq.n	8001352 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001338:	4b8f      	ldr	r3, [pc, #572]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 030c 	and.w	r3, r3, #12
 8001340:	2b08      	cmp	r3, #8
 8001342:	d112      	bne.n	800136a <HAL_RCC_OscConfig+0x5e>
 8001344:	4b8c      	ldr	r3, [pc, #560]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001350:	d10b      	bne.n	800136a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001352:	4b89      	ldr	r3, [pc, #548]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d06c      	beq.n	8001438 <HAL_RCC_OscConfig+0x12c>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d168      	bne.n	8001438 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e246      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001372:	d106      	bne.n	8001382 <HAL_RCC_OscConfig+0x76>
 8001374:	4b80      	ldr	r3, [pc, #512]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a7f      	ldr	r2, [pc, #508]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 800137a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	e02e      	b.n	80013e0 <HAL_RCC_OscConfig+0xd4>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10c      	bne.n	80013a4 <HAL_RCC_OscConfig+0x98>
 800138a:	4b7b      	ldr	r3, [pc, #492]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a7a      	ldr	r2, [pc, #488]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	4b78      	ldr	r3, [pc, #480]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a77      	ldr	r2, [pc, #476]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 800139c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	e01d      	b.n	80013e0 <HAL_RCC_OscConfig+0xd4>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013ac:	d10c      	bne.n	80013c8 <HAL_RCC_OscConfig+0xbc>
 80013ae:	4b72      	ldr	r3, [pc, #456]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a71      	ldr	r2, [pc, #452]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	4b6f      	ldr	r3, [pc, #444]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a6e      	ldr	r2, [pc, #440]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	e00b      	b.n	80013e0 <HAL_RCC_OscConfig+0xd4>
 80013c8:	4b6b      	ldr	r3, [pc, #428]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a6a      	ldr	r2, [pc, #424]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80013ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	4b68      	ldr	r3, [pc, #416]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a67      	ldr	r2, [pc, #412]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80013da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d013      	beq.n	8001410 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fa22 	bl	8000830 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f0:	f7ff fa1e 	bl	8000830 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b64      	cmp	r3, #100	; 0x64
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e1fa      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001402:	4b5d      	ldr	r3, [pc, #372]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0xe4>
 800140e:	e014      	b.n	800143a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001410:	f7ff fa0e 	bl	8000830 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001418:	f7ff fa0a 	bl	8000830 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b64      	cmp	r3, #100	; 0x64
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e1e6      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142a:	4b53      	ldr	r3, [pc, #332]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f0      	bne.n	8001418 <HAL_RCC_OscConfig+0x10c>
 8001436:	e000      	b.n	800143a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d063      	beq.n	800150e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001446:	4b4c      	ldr	r3, [pc, #304]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00b      	beq.n	800146a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001452:	4b49      	ldr	r3, [pc, #292]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b08      	cmp	r3, #8
 800145c:	d11c      	bne.n	8001498 <HAL_RCC_OscConfig+0x18c>
 800145e:	4b46      	ldr	r3, [pc, #280]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d116      	bne.n	8001498 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146a:	4b43      	ldr	r3, [pc, #268]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d005      	beq.n	8001482 <HAL_RCC_OscConfig+0x176>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d001      	beq.n	8001482 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e1ba      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001482:	4b3d      	ldr	r3, [pc, #244]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	4939      	ldr	r1, [pc, #228]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001492:	4313      	orrs	r3, r2
 8001494:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001496:	e03a      	b.n	800150e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d020      	beq.n	80014e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a0:	4b36      	ldr	r3, [pc, #216]	; (800157c <HAL_RCC_OscConfig+0x270>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a6:	f7ff f9c3 	bl	8000830 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ae:	f7ff f9bf 	bl	8000830 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e19b      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c0:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014cc:	4b2a      	ldr	r3, [pc, #168]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	695b      	ldr	r3, [r3, #20]
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	4927      	ldr	r1, [pc, #156]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	600b      	str	r3, [r1, #0]
 80014e0:	e015      	b.n	800150e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <HAL_RCC_OscConfig+0x270>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7ff f9a2 	bl	8000830 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f0:	f7ff f99e 	bl	8000830 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e17a      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001502:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	2b00      	cmp	r3, #0
 8001518:	d03a      	beq.n	8001590 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d019      	beq.n	8001556 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001522:	4b17      	ldr	r3, [pc, #92]	; (8001580 <HAL_RCC_OscConfig+0x274>)
 8001524:	2201      	movs	r2, #1
 8001526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001528:	f7ff f982 	bl	8000830 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001530:	f7ff f97e 	bl	8000830 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e15a      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001542:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <HAL_RCC_OscConfig+0x26c>)
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800154e:	2001      	movs	r0, #1
 8001550:	f000 facc 	bl	8001aec <RCC_Delay>
 8001554:	e01c      	b.n	8001590 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_RCC_OscConfig+0x274>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155c:	f7ff f968 	bl	8000830 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001562:	e00f      	b.n	8001584 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001564:	f7ff f964 	bl	8000830 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d908      	bls.n	8001584 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e140      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
 8001576:	bf00      	nop
 8001578:	40021000 	.word	0x40021000
 800157c:	42420000 	.word	0x42420000
 8001580:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001584:	4b9e      	ldr	r3, [pc, #632]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 8001586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1e9      	bne.n	8001564 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80a6 	beq.w	80016ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015a2:	4b97      	ldr	r3, [pc, #604]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10d      	bne.n	80015ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	4b94      	ldr	r3, [pc, #592]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	4a93      	ldr	r2, [pc, #588]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b8:	61d3      	str	r3, [r2, #28]
 80015ba:	4b91      	ldr	r3, [pc, #580]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015c6:	2301      	movs	r3, #1
 80015c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ca:	4b8e      	ldr	r3, [pc, #568]	; (8001804 <HAL_RCC_OscConfig+0x4f8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d118      	bne.n	8001608 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015d6:	4b8b      	ldr	r3, [pc, #556]	; (8001804 <HAL_RCC_OscConfig+0x4f8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a8a      	ldr	r2, [pc, #552]	; (8001804 <HAL_RCC_OscConfig+0x4f8>)
 80015dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015e2:	f7ff f925 	bl	8000830 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ea:	f7ff f921 	bl	8000830 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b64      	cmp	r3, #100	; 0x64
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e0fd      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fc:	4b81      	ldr	r3, [pc, #516]	; (8001804 <HAL_RCC_OscConfig+0x4f8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0f0      	beq.n	80015ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d106      	bne.n	800161e <HAL_RCC_OscConfig+0x312>
 8001610:	4b7b      	ldr	r3, [pc, #492]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	4a7a      	ldr	r2, [pc, #488]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6213      	str	r3, [r2, #32]
 800161c:	e02d      	b.n	800167a <HAL_RCC_OscConfig+0x36e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0x334>
 8001626:	4b76      	ldr	r3, [pc, #472]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	4a75      	ldr	r2, [pc, #468]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 800162c:	f023 0301 	bic.w	r3, r3, #1
 8001630:	6213      	str	r3, [r2, #32]
 8001632:	4b73      	ldr	r3, [pc, #460]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	4a72      	ldr	r2, [pc, #456]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 8001638:	f023 0304 	bic.w	r3, r3, #4
 800163c:	6213      	str	r3, [r2, #32]
 800163e:	e01c      	b.n	800167a <HAL_RCC_OscConfig+0x36e>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	2b05      	cmp	r3, #5
 8001646:	d10c      	bne.n	8001662 <HAL_RCC_OscConfig+0x356>
 8001648:	4b6d      	ldr	r3, [pc, #436]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	4a6c      	ldr	r2, [pc, #432]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 800164e:	f043 0304 	orr.w	r3, r3, #4
 8001652:	6213      	str	r3, [r2, #32]
 8001654:	4b6a      	ldr	r3, [pc, #424]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	4a69      	ldr	r2, [pc, #420]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6213      	str	r3, [r2, #32]
 8001660:	e00b      	b.n	800167a <HAL_RCC_OscConfig+0x36e>
 8001662:	4b67      	ldr	r3, [pc, #412]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	4a66      	ldr	r2, [pc, #408]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 8001668:	f023 0301 	bic.w	r3, r3, #1
 800166c:	6213      	str	r3, [r2, #32]
 800166e:	4b64      	ldr	r3, [pc, #400]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	4a63      	ldr	r2, [pc, #396]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 8001674:	f023 0304 	bic.w	r3, r3, #4
 8001678:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d015      	beq.n	80016ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001682:	f7ff f8d5 	bl	8000830 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001688:	e00a      	b.n	80016a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168a:	f7ff f8d1 	bl	8000830 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	f241 3288 	movw	r2, #5000	; 0x1388
 8001698:	4293      	cmp	r3, r2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e0ab      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a0:	4b57      	ldr	r3, [pc, #348]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0ee      	beq.n	800168a <HAL_RCC_OscConfig+0x37e>
 80016ac:	e014      	b.n	80016d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ae:	f7ff f8bf 	bl	8000830 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b4:	e00a      	b.n	80016cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b6:	f7ff f8bb 	bl	8000830 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e095      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016cc:	4b4c      	ldr	r3, [pc, #304]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1ee      	bne.n	80016b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016d8:	7dfb      	ldrb	r3, [r7, #23]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d105      	bne.n	80016ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016de:	4b48      	ldr	r3, [pc, #288]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	4a47      	ldr	r2, [pc, #284]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 80016e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 8081 	beq.w	80017f6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016f4:	4b42      	ldr	r3, [pc, #264]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 030c 	and.w	r3, r3, #12
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d061      	beq.n	80017c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69db      	ldr	r3, [r3, #28]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d146      	bne.n	8001796 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001708:	4b3f      	ldr	r3, [pc, #252]	; (8001808 <HAL_RCC_OscConfig+0x4fc>)
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170e:	f7ff f88f 	bl	8000830 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001716:	f7ff f88b 	bl	8000830 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e067      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001728:	4b35      	ldr	r3, [pc, #212]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1f0      	bne.n	8001716 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800173c:	d108      	bne.n	8001750 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800173e:	4b30      	ldr	r3, [pc, #192]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	492d      	ldr	r1, [pc, #180]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 800174c:	4313      	orrs	r3, r2
 800174e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001750:	4b2b      	ldr	r3, [pc, #172]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a19      	ldr	r1, [r3, #32]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	430b      	orrs	r3, r1
 8001762:	4927      	ldr	r1, [pc, #156]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001768:	4b27      	ldr	r3, [pc, #156]	; (8001808 <HAL_RCC_OscConfig+0x4fc>)
 800176a:	2201      	movs	r2, #1
 800176c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176e:	f7ff f85f 	bl	8000830 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001776:	f7ff f85b 	bl	8000830 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e037      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001788:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0f0      	beq.n	8001776 <HAL_RCC_OscConfig+0x46a>
 8001794:	e02f      	b.n	80017f6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001796:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <HAL_RCC_OscConfig+0x4fc>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179c:	f7ff f848 	bl	8000830 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a4:	f7ff f844 	bl	8000830 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e020      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0x498>
 80017c2:	e018      	b.n	80017f6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e013      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_RCC_OscConfig+0x4f4>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d106      	bne.n	80017f2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d001      	beq.n	80017f6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40021000 	.word	0x40021000
 8001804:	40007000 	.word	0x40007000
 8001808:	42420060 	.word	0x42420060

0800180c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e0d0      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001820:	4b6a      	ldr	r3, [pc, #424]	; (80019cc <HAL_RCC_ClockConfig+0x1c0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d910      	bls.n	8001850 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182e:	4b67      	ldr	r3, [pc, #412]	; (80019cc <HAL_RCC_ClockConfig+0x1c0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 0207 	bic.w	r2, r3, #7
 8001836:	4965      	ldr	r1, [pc, #404]	; (80019cc <HAL_RCC_ClockConfig+0x1c0>)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800183e:	4b63      	ldr	r3, [pc, #396]	; (80019cc <HAL_RCC_ClockConfig+0x1c0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d001      	beq.n	8001850 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e0b8      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d020      	beq.n	800189e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d005      	beq.n	8001874 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001868:	4b59      	ldr	r3, [pc, #356]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	4a58      	ldr	r2, [pc, #352]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 800186e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001872:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001880:	4b53      	ldr	r3, [pc, #332]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	4a52      	ldr	r2, [pc, #328]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800188a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800188c:	4b50      	ldr	r3, [pc, #320]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	494d      	ldr	r1, [pc, #308]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 800189a:	4313      	orrs	r3, r2
 800189c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d040      	beq.n	800192c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d107      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b2:	4b47      	ldr	r3, [pc, #284]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d115      	bne.n	80018ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e07f      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d107      	bne.n	80018da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ca:	4b41      	ldr	r3, [pc, #260]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d109      	bne.n	80018ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e073      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018da:	4b3d      	ldr	r3, [pc, #244]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e06b      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ea:	4b39      	ldr	r3, [pc, #228]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f023 0203 	bic.w	r2, r3, #3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	4936      	ldr	r1, [pc, #216]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018fc:	f7fe ff98 	bl	8000830 <HAL_GetTick>
 8001900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001902:	e00a      	b.n	800191a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001904:	f7fe ff94 	bl	8000830 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001912:	4293      	cmp	r3, r2
 8001914:	d901      	bls.n	800191a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e053      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191a:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 020c 	and.w	r2, r3, #12
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	429a      	cmp	r2, r3
 800192a:	d1eb      	bne.n	8001904 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800192c:	4b27      	ldr	r3, [pc, #156]	; (80019cc <HAL_RCC_ClockConfig+0x1c0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d210      	bcs.n	800195c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193a:	4b24      	ldr	r3, [pc, #144]	; (80019cc <HAL_RCC_ClockConfig+0x1c0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 0207 	bic.w	r2, r3, #7
 8001942:	4922      	ldr	r1, [pc, #136]	; (80019cc <HAL_RCC_ClockConfig+0x1c0>)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800194a:	4b20      	ldr	r3, [pc, #128]	; (80019cc <HAL_RCC_ClockConfig+0x1c0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d001      	beq.n	800195c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e032      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001968:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	4916      	ldr	r1, [pc, #88]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	4313      	orrs	r3, r2
 8001978:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b00      	cmp	r3, #0
 8001984:	d009      	beq.n	800199a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001986:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	490e      	ldr	r1, [pc, #56]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001996:	4313      	orrs	r3, r2
 8001998:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800199a:	f000 f821 	bl	80019e0 <HAL_RCC_GetSysClockFreq>
 800199e:	4602      	mov	r2, r0
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	091b      	lsrs	r3, r3, #4
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	490a      	ldr	r1, [pc, #40]	; (80019d4 <HAL_RCC_ClockConfig+0x1c8>)
 80019ac:	5ccb      	ldrb	r3, [r1, r3]
 80019ae:	fa22 f303 	lsr.w	r3, r2, r3
 80019b2:	4a09      	ldr	r2, [pc, #36]	; (80019d8 <HAL_RCC_ClockConfig+0x1cc>)
 80019b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <HAL_RCC_ClockConfig+0x1d0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fef6 	bl	80007ac <HAL_InitTick>

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40022000 	.word	0x40022000
 80019d0:	40021000 	.word	0x40021000
 80019d4:	080031c4 	.word	0x080031c4
 80019d8:	20000000 	.word	0x20000000
 80019dc:	20000004 	.word	0x20000004

080019e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b087      	sub	sp, #28
 80019e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019fa:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x94>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 030c 	and.w	r3, r3, #12
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d002      	beq.n	8001a10 <HAL_RCC_GetSysClockFreq+0x30>
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d003      	beq.n	8001a16 <HAL_RCC_GetSysClockFreq+0x36>
 8001a0e:	e027      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a10:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a12:	613b      	str	r3, [r7, #16]
      break;
 8001a14:	e027      	b.n	8001a66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	0c9b      	lsrs	r3, r3, #18
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	4a17      	ldr	r2, [pc, #92]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a20:	5cd3      	ldrb	r3, [r2, r3]
 8001a22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d010      	beq.n	8001a50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a2e:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	0c5b      	lsrs	r3, r3, #17
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	4a11      	ldr	r2, [pc, #68]	; (8001a80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a3a:	5cd3      	ldrb	r3, [r2, r3]
 8001a3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a0d      	ldr	r2, [pc, #52]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a42:	fb02 f203 	mul.w	r2, r2, r3
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	e004      	b.n	8001a5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a0c      	ldr	r2, [pc, #48]	; (8001a84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a54:	fb02 f303 	mul.w	r3, r2, r3
 8001a58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	613b      	str	r3, [r7, #16]
      break;
 8001a5e:	e002      	b.n	8001a66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a62:	613b      	str	r3, [r7, #16]
      break;
 8001a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a66:	693b      	ldr	r3, [r7, #16]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	371c      	adds	r7, #28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	40021000 	.word	0x40021000
 8001a78:	007a1200 	.word	0x007a1200
 8001a7c:	080031dc 	.word	0x080031dc
 8001a80:	080031ec 	.word	0x080031ec
 8001a84:	003d0900 	.word	0x003d0900

08001a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a8c:	4b02      	ldr	r3, [pc, #8]	; (8001a98 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	20000000 	.word	0x20000000

08001a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001aa0:	f7ff fff2 	bl	8001a88 <HAL_RCC_GetHCLKFreq>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	4b05      	ldr	r3, [pc, #20]	; (8001abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	0a1b      	lsrs	r3, r3, #8
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	4903      	ldr	r1, [pc, #12]	; (8001ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ab2:	5ccb      	ldrb	r3, [r1, r3]
 8001ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	080031d4 	.word	0x080031d4

08001ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ac8:	f7ff ffde 	bl	8001a88 <HAL_RCC_GetHCLKFreq>
 8001acc:	4602      	mov	r2, r0
 8001ace:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	0adb      	lsrs	r3, r3, #11
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	4903      	ldr	r1, [pc, #12]	; (8001ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ada:	5ccb      	ldrb	r3, [r1, r3]
 8001adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	080031d4 	.word	0x080031d4

08001aec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001af4:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <RCC_Delay+0x34>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <RCC_Delay+0x38>)
 8001afa:	fba2 2303 	umull	r2, r3, r2, r3
 8001afe:	0a5b      	lsrs	r3, r3, #9
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	fb02 f303 	mul.w	r3, r2, r3
 8001b06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b08:	bf00      	nop
  }
  while (Delay --);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1e5a      	subs	r2, r3, #1
 8001b0e:	60fa      	str	r2, [r7, #12]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f9      	bne.n	8001b08 <RCC_Delay+0x1c>
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	20000000 	.word	0x20000000
 8001b24:	10624dd3 	.word	0x10624dd3

08001b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d07d      	beq.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001b44:	2300      	movs	r3, #0
 8001b46:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b48:	4b4f      	ldr	r3, [pc, #316]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10d      	bne.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b54:	4b4c      	ldr	r3, [pc, #304]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	4a4b      	ldr	r2, [pc, #300]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5e:	61d3      	str	r3, [r2, #28]
 8001b60:	4b49      	ldr	r3, [pc, #292]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b70:	4b46      	ldr	r3, [pc, #280]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d118      	bne.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b7c:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a42      	ldr	r2, [pc, #264]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b88:	f7fe fe52 	bl	8000830 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b90:	f7fe fe4e 	bl	8000830 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b64      	cmp	r3, #100	; 0x64
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e06d      	b.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba2:	4b3a      	ldr	r3, [pc, #232]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0f0      	beq.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bae:	4b36      	ldr	r3, [pc, #216]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bb6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d02e      	beq.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d027      	beq.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bcc:	4b2e      	ldr	r3, [pc, #184]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bd4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bd6:	4b2e      	ldr	r3, [pc, #184]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bdc:	4b2c      	ldr	r3, [pc, #176]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001be2:	4a29      	ldr	r2, [pc, #164]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d014      	beq.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf2:	f7fe fe1d 	bl	8000830 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf8:	e00a      	b.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfa:	f7fe fe19 	bl	8000830 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e036      	b.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c10:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0ee      	beq.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c1c:	4b1a      	ldr	r3, [pc, #104]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	4917      	ldr	r1, [pc, #92]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c2e:	7dfb      	ldrb	r3, [r7, #23]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d105      	bne.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c34:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	4a13      	ldr	r2, [pc, #76]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d008      	beq.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	490b      	ldr	r1, [pc, #44]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d008      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	4904      	ldr	r1, [pc, #16]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40007000 	.word	0x40007000
 8001c90:	42420440 	.word	0x42420440

08001c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e041      	b.n	8001d2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d106      	bne.n	8001cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7fe fc82 	bl	80005c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3304      	adds	r3, #4
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	f000 fa6e 	bl	80021b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d001      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e035      	b.n	8001db8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a16      	ldr	r2, [pc, #88]	; (8001dc4 <HAL_TIM_Base_Start_IT+0x90>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d009      	beq.n	8001d82 <HAL_TIM_Base_Start_IT+0x4e>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d76:	d004      	beq.n	8001d82 <HAL_TIM_Base_Start_IT+0x4e>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <HAL_TIM_Base_Start_IT+0x94>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d111      	bne.n	8001da6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2b06      	cmp	r3, #6
 8001d92:	d010      	beq.n	8001db6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da4:	e007      	b.n	8001db6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0201 	orr.w	r2, r2, #1
 8001db4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40012c00 	.word	0x40012c00
 8001dc8:	40000400 	.word	0x40000400

08001dcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d122      	bne.n	8001e28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d11b      	bne.n	8001e28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f06f 0202 	mvn.w	r2, #2
 8001df8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f9b4 	bl	800217c <HAL_TIM_IC_CaptureCallback>
 8001e14:	e005      	b.n	8001e22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f9a7 	bl	800216a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f9b6 	bl	800218e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d122      	bne.n	8001e7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d11b      	bne.n	8001e7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f06f 0204 	mvn.w	r2, #4
 8001e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2202      	movs	r2, #2
 8001e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f98a 	bl	800217c <HAL_TIM_IC_CaptureCallback>
 8001e68:	e005      	b.n	8001e76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f97d 	bl	800216a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f98c 	bl	800218e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d122      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d11b      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0208 	mvn.w	r2, #8
 8001ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2204      	movs	r2, #4
 8001ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f960 	bl	800217c <HAL_TIM_IC_CaptureCallback>
 8001ebc:	e005      	b.n	8001eca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f953 	bl	800216a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f962 	bl	800218e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	f003 0310 	and.w	r3, r3, #16
 8001eda:	2b10      	cmp	r3, #16
 8001edc:	d122      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f003 0310 	and.w	r3, r3, #16
 8001ee8:	2b10      	cmp	r3, #16
 8001eea:	d11b      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f06f 0210 	mvn.w	r2, #16
 8001ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2208      	movs	r2, #8
 8001efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f936 	bl	800217c <HAL_TIM_IC_CaptureCallback>
 8001f10:	e005      	b.n	8001f1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f929 	bl	800216a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 f938 	bl	800218e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d10e      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d107      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0201 	mvn.w	r2, #1
 8001f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7fe fabc 	bl	80004c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5a:	2b80      	cmp	r3, #128	; 0x80
 8001f5c:	d10e      	bne.n	8001f7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f68:	2b80      	cmp	r3, #128	; 0x80
 8001f6a:	d107      	bne.n	8001f7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 fa6b 	bl	8002452 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f86:	2b40      	cmp	r3, #64	; 0x40
 8001f88:	d10e      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f94:	2b40      	cmp	r3, #64	; 0x40
 8001f96:	d107      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f8fc 	bl	80021a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f003 0320 	and.w	r3, r3, #32
 8001fb2:	2b20      	cmp	r3, #32
 8001fb4:	d10e      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 0320 	and.w	r3, r3, #32
 8001fc0:	2b20      	cmp	r3, #32
 8001fc2:	d107      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0220 	mvn.w	r2, #32
 8001fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 fa36 	bl	8002440 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_TIM_ConfigClockSource+0x1c>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e0b4      	b.n	8002162 <HAL_TIM_ConfigClockSource+0x186>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2202      	movs	r2, #2
 8002004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800201e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68ba      	ldr	r2, [r7, #8]
 8002026:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002030:	d03e      	beq.n	80020b0 <HAL_TIM_ConfigClockSource+0xd4>
 8002032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002036:	f200 8087 	bhi.w	8002148 <HAL_TIM_ConfigClockSource+0x16c>
 800203a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800203e:	f000 8086 	beq.w	800214e <HAL_TIM_ConfigClockSource+0x172>
 8002042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002046:	d87f      	bhi.n	8002148 <HAL_TIM_ConfigClockSource+0x16c>
 8002048:	2b70      	cmp	r3, #112	; 0x70
 800204a:	d01a      	beq.n	8002082 <HAL_TIM_ConfigClockSource+0xa6>
 800204c:	2b70      	cmp	r3, #112	; 0x70
 800204e:	d87b      	bhi.n	8002148 <HAL_TIM_ConfigClockSource+0x16c>
 8002050:	2b60      	cmp	r3, #96	; 0x60
 8002052:	d050      	beq.n	80020f6 <HAL_TIM_ConfigClockSource+0x11a>
 8002054:	2b60      	cmp	r3, #96	; 0x60
 8002056:	d877      	bhi.n	8002148 <HAL_TIM_ConfigClockSource+0x16c>
 8002058:	2b50      	cmp	r3, #80	; 0x50
 800205a:	d03c      	beq.n	80020d6 <HAL_TIM_ConfigClockSource+0xfa>
 800205c:	2b50      	cmp	r3, #80	; 0x50
 800205e:	d873      	bhi.n	8002148 <HAL_TIM_ConfigClockSource+0x16c>
 8002060:	2b40      	cmp	r3, #64	; 0x40
 8002062:	d058      	beq.n	8002116 <HAL_TIM_ConfigClockSource+0x13a>
 8002064:	2b40      	cmp	r3, #64	; 0x40
 8002066:	d86f      	bhi.n	8002148 <HAL_TIM_ConfigClockSource+0x16c>
 8002068:	2b30      	cmp	r3, #48	; 0x30
 800206a:	d064      	beq.n	8002136 <HAL_TIM_ConfigClockSource+0x15a>
 800206c:	2b30      	cmp	r3, #48	; 0x30
 800206e:	d86b      	bhi.n	8002148 <HAL_TIM_ConfigClockSource+0x16c>
 8002070:	2b20      	cmp	r3, #32
 8002072:	d060      	beq.n	8002136 <HAL_TIM_ConfigClockSource+0x15a>
 8002074:	2b20      	cmp	r3, #32
 8002076:	d867      	bhi.n	8002148 <HAL_TIM_ConfigClockSource+0x16c>
 8002078:	2b00      	cmp	r3, #0
 800207a:	d05c      	beq.n	8002136 <HAL_TIM_ConfigClockSource+0x15a>
 800207c:	2b10      	cmp	r3, #16
 800207e:	d05a      	beq.n	8002136 <HAL_TIM_ConfigClockSource+0x15a>
 8002080:	e062      	b.n	8002148 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6818      	ldr	r0, [r3, #0]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	6899      	ldr	r1, [r3, #8]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	f000 f95e 	bl	8002352 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	609a      	str	r2, [r3, #8]
      break;
 80020ae:	e04f      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	6899      	ldr	r1, [r3, #8]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f000 f947 	bl	8002352 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020d2:	609a      	str	r2, [r3, #8]
      break;
 80020d4:	e03c      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6818      	ldr	r0, [r3, #0]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	6859      	ldr	r1, [r3, #4]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	461a      	mov	r2, r3
 80020e4:	f000 f8be 	bl	8002264 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2150      	movs	r1, #80	; 0x50
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f915 	bl	800231e <TIM_ITRx_SetConfig>
      break;
 80020f4:	e02c      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	6859      	ldr	r1, [r3, #4]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	461a      	mov	r2, r3
 8002104:	f000 f8dc 	bl	80022c0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2160      	movs	r1, #96	; 0x60
 800210e:	4618      	mov	r0, r3
 8002110:	f000 f905 	bl	800231e <TIM_ITRx_SetConfig>
      break;
 8002114:	e01c      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	6859      	ldr	r1, [r3, #4]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	461a      	mov	r2, r3
 8002124:	f000 f89e 	bl	8002264 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2140      	movs	r1, #64	; 0x40
 800212e:	4618      	mov	r0, r3
 8002130:	f000 f8f5 	bl	800231e <TIM_ITRx_SetConfig>
      break;
 8002134:	e00c      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4619      	mov	r1, r3
 8002140:	4610      	mov	r0, r2
 8002142:	f000 f8ec 	bl	800231e <TIM_ITRx_SetConfig>
      break;
 8002146:	e003      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	73fb      	strb	r3, [r7, #15]
      break;
 800214c:	e000      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800214e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002160:	7bfb      	ldrb	r3, [r7, #15]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr

0800218e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr
	...

080021b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a25      	ldr	r2, [pc, #148]	; (800225c <TIM_Base_SetConfig+0xa8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d007      	beq.n	80021dc <TIM_Base_SetConfig+0x28>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d2:	d003      	beq.n	80021dc <TIM_Base_SetConfig+0x28>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a22      	ldr	r2, [pc, #136]	; (8002260 <TIM_Base_SetConfig+0xac>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d108      	bne.n	80021ee <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a1a      	ldr	r2, [pc, #104]	; (800225c <TIM_Base_SetConfig+0xa8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d007      	beq.n	8002206 <TIM_Base_SetConfig+0x52>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021fc:	d003      	beq.n	8002206 <TIM_Base_SetConfig+0x52>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a17      	ldr	r2, [pc, #92]	; (8002260 <TIM_Base_SetConfig+0xac>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d108      	bne.n	8002218 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800220c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	4313      	orrs	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	4313      	orrs	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a07      	ldr	r2, [pc, #28]	; (800225c <TIM_Base_SetConfig+0xa8>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d103      	bne.n	800224c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	615a      	str	r2, [r3, #20]
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	40012c00 	.word	0x40012c00
 8002260:	40000400 	.word	0x40000400

08002264 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002264:	b480      	push	{r7}
 8002266:	b087      	sub	sp, #28
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	f023 0201 	bic.w	r2, r3, #1
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800228e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f023 030a 	bic.w	r3, r3, #10
 80022a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	621a      	str	r2, [r3, #32]
}
 80022b6:	bf00      	nop
 80022b8:	371c      	adds	r7, #28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr

080022c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b087      	sub	sp, #28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	f023 0210 	bic.w	r2, r3, #16
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80022ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	031b      	lsls	r3, r3, #12
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80022fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	4313      	orrs	r3, r2
 8002306:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	621a      	str	r2, [r3, #32]
}
 8002314:	bf00      	nop
 8002316:	371c      	adds	r7, #28
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr

0800231e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800231e:	b480      	push	{r7}
 8002320:	b085      	sub	sp, #20
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002334:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4313      	orrs	r3, r2
 800233c:	f043 0307 	orr.w	r3, r3, #7
 8002340:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	609a      	str	r2, [r3, #8]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr

08002352 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002352:	b480      	push	{r7}
 8002354:	b087      	sub	sp, #28
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
 800235e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800236c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	021a      	lsls	r2, r3, #8
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	431a      	orrs	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	4313      	orrs	r3, r2
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	4313      	orrs	r3, r2
 800237e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	609a      	str	r2, [r3, #8]
}
 8002386:	bf00      	nop
 8002388:	371c      	adds	r7, #28
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e041      	b.n	800242c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a14      	ldr	r2, [pc, #80]	; (8002438 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d009      	beq.n	8002400 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f4:	d004      	beq.n	8002400 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a10      	ldr	r2, [pc, #64]	; (800243c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d10c      	bne.n	800241a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002406:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	4313      	orrs	r3, r2
 8002410:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40012c00 	.word	0x40012c00
 800243c:	40000400 	.word	0x40000400

08002440 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr

08002452 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e042      	b.n	80024fc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d106      	bne.n	8002490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7fe f8be 	bl	800060c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2224      	movs	r2, #36	; 0x24
 8002494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fdc5 	bl	8003038 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695a      	ldr	r2, [r3, #20]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08a      	sub	sp, #40	; 0x28
 8002508:	af02      	add	r7, sp, #8
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	4613      	mov	r3, r2
 8002512:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b20      	cmp	r3, #32
 8002522:	d16d      	bne.n	8002600 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <HAL_UART_Transmit+0x2c>
 800252a:	88fb      	ldrh	r3, [r7, #6]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e066      	b.n	8002602 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2221      	movs	r2, #33	; 0x21
 800253e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002542:	f7fe f975 	bl	8000830 <HAL_GetTick>
 8002546:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	88fa      	ldrh	r2, [r7, #6]
 800254c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	88fa      	ldrh	r2, [r7, #6]
 8002552:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800255c:	d108      	bne.n	8002570 <HAL_UART_Transmit+0x6c>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d104      	bne.n	8002570 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	61bb      	str	r3, [r7, #24]
 800256e:	e003      	b.n	8002578 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002574:	2300      	movs	r3, #0
 8002576:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002578:	e02a      	b.n	80025d0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2200      	movs	r2, #0
 8002582:	2180      	movs	r1, #128	; 0x80
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 fb14 	bl	8002bb2 <UART_WaitOnFlagUntilTimeout>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e036      	b.n	8002602 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10b      	bne.n	80025b2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	3302      	adds	r3, #2
 80025ae:	61bb      	str	r3, [r7, #24]
 80025b0:	e007      	b.n	80025c2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	781a      	ldrb	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	3301      	adds	r3, #1
 80025c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1cf      	bne.n	800257a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2200      	movs	r2, #0
 80025e2:	2140      	movs	r1, #64	; 0x40
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 fae4 	bl	8002bb2 <UART_WaitOnFlagUntilTimeout>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e006      	b.n	8002602 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	e000      	b.n	8002602 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002600:	2302      	movs	r3, #2
  }
}
 8002602:	4618      	mov	r0, r3
 8002604:	3720      	adds	r7, #32
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b084      	sub	sp, #16
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	4613      	mov	r3, r2
 8002616:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b20      	cmp	r3, #32
 8002622:	d112      	bne.n	800264a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <HAL_UART_Receive_IT+0x26>
 800262a:	88fb      	ldrh	r3, [r7, #6]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e00b      	b.n	800264c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800263a:	88fb      	ldrh	r3, [r7, #6]
 800263c:	461a      	mov	r2, r3
 800263e:	68b9      	ldr	r1, [r7, #8]
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 fb24 	bl	8002c8e <UART_Start_Receive_IT>
 8002646:	4603      	mov	r3, r0
 8002648:	e000      	b.n	800264c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800264a:	2302      	movs	r3, #2
  }
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b0ba      	sub	sp, #232	; 0xe8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800267a:	2300      	movs	r3, #0
 800267c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002680:	2300      	movs	r3, #0
 8002682:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002692:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10f      	bne.n	80026ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800269a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800269e:	f003 0320 	and.w	r3, r3, #32
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d009      	beq.n	80026ba <HAL_UART_IRQHandler+0x66>
 80026a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026aa:	f003 0320 	and.w	r3, r3, #32
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 fc01 	bl	8002eba <UART_Receive_IT>
      return;
 80026b8:	e25b      	b.n	8002b72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80026ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 80de 	beq.w	8002880 <HAL_UART_IRQHandler+0x22c>
 80026c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d106      	bne.n	80026de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 80d1 	beq.w	8002880 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00b      	beq.n	8002702 <HAL_UART_IRQHandler+0xae>
 80026ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d005      	beq.n	8002702 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	f043 0201 	orr.w	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002706:	f003 0304 	and.w	r3, r3, #4
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00b      	beq.n	8002726 <HAL_UART_IRQHandler+0xd2>
 800270e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d005      	beq.n	8002726 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	f043 0202 	orr.w	r2, r3, #2
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00b      	beq.n	800274a <HAL_UART_IRQHandler+0xf6>
 8002732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d005      	beq.n	800274a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	f043 0204 	orr.w	r2, r3, #4
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800274a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b00      	cmp	r3, #0
 8002754:	d011      	beq.n	800277a <HAL_UART_IRQHandler+0x126>
 8002756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800275a:	f003 0320 	and.w	r3, r3, #32
 800275e:	2b00      	cmp	r3, #0
 8002760:	d105      	bne.n	800276e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d005      	beq.n	800277a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	f043 0208 	orr.w	r2, r3, #8
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 81f2 	beq.w	8002b68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002788:	f003 0320 	and.w	r3, r3, #32
 800278c:	2b00      	cmp	r3, #0
 800278e:	d008      	beq.n	80027a2 <HAL_UART_IRQHandler+0x14e>
 8002790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002794:	f003 0320 	and.w	r3, r3, #32
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 fb8c 	bl	8002eba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	bf14      	ite	ne
 80027b0:	2301      	movne	r3, #1
 80027b2:	2300      	moveq	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d103      	bne.n	80027ce <HAL_UART_IRQHandler+0x17a>
 80027c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d04f      	beq.n	800286e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 fa96 	bl	8002d00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d041      	beq.n	8002866 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	3314      	adds	r3, #20
 80027e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027f0:	e853 3f00 	ldrex	r3, [r3]
 80027f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80027f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002800:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	3314      	adds	r3, #20
 800280a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800280e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002812:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002816:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800281a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800281e:	e841 2300 	strex	r3, r2, [r1]
 8002822:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002826:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1d9      	bne.n	80027e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002832:	2b00      	cmp	r3, #0
 8002834:	d013      	beq.n	800285e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283a:	4a7e      	ldr	r2, [pc, #504]	; (8002a34 <HAL_UART_IRQHandler+0x3e0>)
 800283c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe fb58 	bl	8000ef8 <HAL_DMA_Abort_IT>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d016      	beq.n	800287c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002858:	4610      	mov	r0, r2
 800285a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800285c:	e00e      	b.n	800287c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f993 	bl	8002b8a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002864:	e00a      	b.n	800287c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f98f 	bl	8002b8a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800286c:	e006      	b.n	800287c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f98b 	bl	8002b8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800287a:	e175      	b.n	8002b68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800287c:	bf00      	nop
    return;
 800287e:	e173      	b.n	8002b68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	2b01      	cmp	r3, #1
 8002886:	f040 814f 	bne.w	8002b28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800288a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800288e:	f003 0310 	and.w	r3, r3, #16
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 8148 	beq.w	8002b28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 8141 	beq.w	8002b28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028a6:	2300      	movs	r3, #0
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 80b6 	beq.w	8002a38 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80028d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 8145 	beq.w	8002b6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80028ea:	429a      	cmp	r2, r3
 80028ec:	f080 813e 	bcs.w	8002b6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80028f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	2b20      	cmp	r3, #32
 8002900:	f000 8088 	beq.w	8002a14 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	330c      	adds	r3, #12
 800290a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002912:	e853 3f00 	ldrex	r3, [r3]
 8002916:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800291a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800291e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002922:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	330c      	adds	r3, #12
 800292c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002930:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002934:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002938:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800293c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002940:	e841 2300 	strex	r3, r2, [r1]
 8002944:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002948:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1d9      	bne.n	8002904 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	3314      	adds	r3, #20
 8002956:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002958:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800295a:	e853 3f00 	ldrex	r3, [r3]
 800295e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002960:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002962:	f023 0301 	bic.w	r3, r3, #1
 8002966:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	3314      	adds	r3, #20
 8002970:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002974:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002978:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800297c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002980:	e841 2300 	strex	r3, r2, [r1]
 8002984:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002986:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1e1      	bne.n	8002950 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	3314      	adds	r3, #20
 8002992:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002994:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002996:	e853 3f00 	ldrex	r3, [r3]
 800299a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800299c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800299e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	3314      	adds	r3, #20
 80029ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80029b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80029b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029b8:	e841 2300 	strex	r3, r2, [r1]
 80029bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80029be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1e3      	bne.n	800298c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	330c      	adds	r3, #12
 80029d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029dc:	e853 3f00 	ldrex	r3, [r3]
 80029e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80029e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029e4:	f023 0310 	bic.w	r3, r3, #16
 80029e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	330c      	adds	r3, #12
 80029f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80029f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80029f8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029fe:	e841 2300 	strex	r3, r2, [r1]
 8002a02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1e3      	bne.n	80029d2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe fa37 	bl	8000e82 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	4619      	mov	r1, r3
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f8b6 	bl	8002b9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a30:	e09c      	b.n	8002b6c <HAL_UART_IRQHandler+0x518>
 8002a32:	bf00      	nop
 8002a34:	08002dc5 	.word	0x08002dc5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 808e 	beq.w	8002b70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002a54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 8089 	beq.w	8002b70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	330c      	adds	r3, #12
 8002a64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a68:	e853 3f00 	ldrex	r3, [r3]
 8002a6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	330c      	adds	r3, #12
 8002a7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002a82:	647a      	str	r2, [r7, #68]	; 0x44
 8002a84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a8a:	e841 2300 	strex	r3, r2, [r1]
 8002a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1e3      	bne.n	8002a5e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	3314      	adds	r3, #20
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	e853 3f00 	ldrex	r3, [r3]
 8002aa4:	623b      	str	r3, [r7, #32]
   return(result);
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	f023 0301 	bic.w	r3, r3, #1
 8002aac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	3314      	adds	r3, #20
 8002ab6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002aba:	633a      	str	r2, [r7, #48]	; 0x30
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002abe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ac2:	e841 2300 	strex	r3, r2, [r1]
 8002ac6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1e3      	bne.n	8002a96 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	330c      	adds	r3, #12
 8002ae2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	e853 3f00 	ldrex	r3, [r3]
 8002aea:	60fb      	str	r3, [r7, #12]
   return(result);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 0310 	bic.w	r3, r3, #16
 8002af2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	330c      	adds	r3, #12
 8002afc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002b00:	61fa      	str	r2, [r7, #28]
 8002b02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b04:	69b9      	ldr	r1, [r7, #24]
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	e841 2300 	strex	r3, r2, [r1]
 8002b0c:	617b      	str	r3, [r7, #20]
   return(result);
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1e3      	bne.n	8002adc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b1e:	4619      	mov	r1, r3
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f83b 	bl	8002b9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b26:	e023      	b.n	8002b70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d009      	beq.n	8002b48 <HAL_UART_IRQHandler+0x4f4>
 8002b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f953 	bl	8002dec <UART_Transmit_IT>
    return;
 8002b46:	e014      	b.n	8002b72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00e      	beq.n	8002b72 <HAL_UART_IRQHandler+0x51e>
 8002b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f992 	bl	8002e8a <UART_EndTransmit_IT>
    return;
 8002b66:	e004      	b.n	8002b72 <HAL_UART_IRQHandler+0x51e>
    return;
 8002b68:	bf00      	nop
 8002b6a:	e002      	b.n	8002b72 <HAL_UART_IRQHandler+0x51e>
      return;
 8002b6c:	bf00      	nop
 8002b6e:	e000      	b.n	8002b72 <HAL_UART_IRQHandler+0x51e>
      return;
 8002b70:	bf00      	nop
  }
}
 8002b72:	37e8      	adds	r7, #232	; 0xe8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr

08002b8a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr

08002bb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b090      	sub	sp, #64	; 0x40
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	603b      	str	r3, [r7, #0]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bc2:	e050      	b.n	8002c66 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bca:	d04c      	beq.n	8002c66 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d007      	beq.n	8002be2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002bd2:	f7fd fe2d 	bl	8000830 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d241      	bcs.n	8002c66 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	330c      	adds	r3, #12
 8002be8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bec:	e853 3f00 	ldrex	r3, [r3]
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	330c      	adds	r3, #12
 8002c00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c02:	637a      	str	r2, [r7, #52]	; 0x34
 8002c04:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c0a:	e841 2300 	strex	r3, r2, [r1]
 8002c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1e5      	bne.n	8002be2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3314      	adds	r3, #20
 8002c1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	e853 3f00 	ldrex	r3, [r3]
 8002c24:	613b      	str	r3, [r7, #16]
   return(result);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f023 0301 	bic.w	r3, r3, #1
 8002c2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	3314      	adds	r3, #20
 8002c34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c36:	623a      	str	r2, [r7, #32]
 8002c38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3a:	69f9      	ldr	r1, [r7, #28]
 8002c3c:	6a3a      	ldr	r2, [r7, #32]
 8002c3e:	e841 2300 	strex	r3, r2, [r1]
 8002c42:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1e5      	bne.n	8002c16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2220      	movs	r2, #32
 8002c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e00f      	b.n	8002c86 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	bf0c      	ite	eq
 8002c76:	2301      	moveq	r3, #1
 8002c78:	2300      	movne	r3, #0
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d09f      	beq.n	8002bc4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3740      	adds	r7, #64	; 0x40
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b085      	sub	sp, #20
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	88fa      	ldrh	r2, [r7, #6]
 8002ca6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	88fa      	ldrh	r2, [r7, #6]
 8002cac:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2222      	movs	r2, #34	; 0x22
 8002cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d007      	beq.n	8002cd4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cd2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695a      	ldr	r2, [r3, #20]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0201 	orr.w	r2, r2, #1
 8002ce2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0220 	orr.w	r2, r2, #32
 8002cf2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b095      	sub	sp, #84	; 0x54
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	330c      	adds	r3, #12
 8002d0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d12:	e853 3f00 	ldrex	r3, [r3]
 8002d16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	330c      	adds	r3, #12
 8002d26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d28:	643a      	str	r2, [r7, #64]	; 0x40
 8002d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d30:	e841 2300 	strex	r3, r2, [r1]
 8002d34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1e5      	bne.n	8002d08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	3314      	adds	r3, #20
 8002d42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	e853 3f00 	ldrex	r3, [r3]
 8002d4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f023 0301 	bic.w	r3, r3, #1
 8002d52:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	3314      	adds	r3, #20
 8002d5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d64:	e841 2300 	strex	r3, r2, [r1]
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1e5      	bne.n	8002d3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d119      	bne.n	8002dac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	330c      	adds	r3, #12
 8002d7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	e853 3f00 	ldrex	r3, [r3]
 8002d86:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	f023 0310 	bic.w	r3, r3, #16
 8002d8e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	330c      	adds	r3, #12
 8002d96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d98:	61ba      	str	r2, [r7, #24]
 8002d9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9c:	6979      	ldr	r1, [r7, #20]
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	e841 2300 	strex	r3, r2, [r1]
 8002da4:	613b      	str	r3, [r7, #16]
   return(result);
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1e5      	bne.n	8002d78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2220      	movs	r2, #32
 8002db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002dba:	bf00      	nop
 8002dbc:	3754      	adds	r7, #84	; 0x54
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr

08002dc4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f7ff fed3 	bl	8002b8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002de4:	bf00      	nop
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b21      	cmp	r3, #33	; 0x21
 8002dfe:	d13e      	bne.n	8002e7e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e08:	d114      	bne.n	8002e34 <UART_Transmit_IT+0x48>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d110      	bne.n	8002e34 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e26:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	1c9a      	adds	r2, r3, #2
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	621a      	str	r2, [r3, #32]
 8002e32:	e008      	b.n	8002e46 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	1c59      	adds	r1, r3, #1
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6211      	str	r1, [r2, #32]
 8002e3e:	781a      	ldrb	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	4619      	mov	r1, r3
 8002e54:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10f      	bne.n	8002e7a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	e000      	b.n	8002e80 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e7e:	2302      	movs	r3, #2
  }
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr

08002e8a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ea0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7ff fe64 	bl	8002b78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b08c      	sub	sp, #48	; 0x30
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b22      	cmp	r3, #34	; 0x22
 8002ecc:	f040 80ae 	bne.w	800302c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed8:	d117      	bne.n	8002f0a <UART_Receive_IT+0x50>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d113      	bne.n	8002f0a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f02:	1c9a      	adds	r2, r3, #2
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	629a      	str	r2, [r3, #40]	; 0x28
 8002f08:	e026      	b.n	8002f58 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f1c:	d007      	beq.n	8002f2e <UART_Receive_IT+0x74>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10a      	bne.n	8002f3c <UART_Receive_IT+0x82>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f38:	701a      	strb	r2, [r3, #0]
 8002f3a:	e008      	b.n	8002f4e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	4619      	mov	r1, r3
 8002f66:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d15d      	bne.n	8003028 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0220 	bic.w	r2, r2, #32
 8002f7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0201 	bic.w	r2, r2, #1
 8002f9a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d135      	bne.n	800301e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	330c      	adds	r3, #12
 8002fbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	e853 3f00 	ldrex	r3, [r3]
 8002fc6:	613b      	str	r3, [r7, #16]
   return(result);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f023 0310 	bic.w	r3, r3, #16
 8002fce:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	330c      	adds	r3, #12
 8002fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd8:	623a      	str	r2, [r7, #32]
 8002fda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fdc:	69f9      	ldr	r1, [r7, #28]
 8002fde:	6a3a      	ldr	r2, [r7, #32]
 8002fe0:	e841 2300 	strex	r3, r2, [r1]
 8002fe4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e5      	bne.n	8002fb8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0310 	and.w	r3, r3, #16
 8002ff6:	2b10      	cmp	r3, #16
 8002ff8:	d10a      	bne.n	8003010 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003014:	4619      	mov	r1, r3
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff fdc0 	bl	8002b9c <HAL_UARTEx_RxEventCallback>
 800301c:	e002      	b.n	8003024 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fd f8ea 	bl	80001f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	e002      	b.n	800302e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	e000      	b.n	800302e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800302c:	2302      	movs	r3, #2
  }
}
 800302e:	4618      	mov	r0, r3
 8003030:	3730      	adds	r7, #48	; 0x30
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
	...

08003038 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	4313      	orrs	r3, r2
 8003066:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003072:	f023 030c 	bic.w	r3, r3, #12
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	68b9      	ldr	r1, [r7, #8]
 800307c:	430b      	orrs	r3, r1
 800307e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699a      	ldr	r2, [r3, #24]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a2c      	ldr	r2, [pc, #176]	; (800314c <UART_SetConfig+0x114>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d103      	bne.n	80030a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030a0:	f7fe fd10 	bl	8001ac4 <HAL_RCC_GetPCLK2Freq>
 80030a4:	60f8      	str	r0, [r7, #12]
 80030a6:	e002      	b.n	80030ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030a8:	f7fe fcf8 	bl	8001a9c <HAL_RCC_GetPCLK1Freq>
 80030ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	009a      	lsls	r2, r3, #2
 80030b8:	441a      	add	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c4:	4a22      	ldr	r2, [pc, #136]	; (8003150 <UART_SetConfig+0x118>)
 80030c6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	0119      	lsls	r1, r3, #4
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	009a      	lsls	r2, r3, #2
 80030d8:	441a      	add	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80030e4:	4b1a      	ldr	r3, [pc, #104]	; (8003150 <UART_SetConfig+0x118>)
 80030e6:	fba3 0302 	umull	r0, r3, r3, r2
 80030ea:	095b      	lsrs	r3, r3, #5
 80030ec:	2064      	movs	r0, #100	; 0x64
 80030ee:	fb00 f303 	mul.w	r3, r0, r3
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	3332      	adds	r3, #50	; 0x32
 80030f8:	4a15      	ldr	r2, [pc, #84]	; (8003150 <UART_SetConfig+0x118>)
 80030fa:	fba2 2303 	umull	r2, r3, r2, r3
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003104:	4419      	add	r1, r3
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	009a      	lsls	r2, r3, #2
 8003110:	441a      	add	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	fbb2 f2f3 	udiv	r2, r2, r3
 800311c:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <UART_SetConfig+0x118>)
 800311e:	fba3 0302 	umull	r0, r3, r3, r2
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	2064      	movs	r0, #100	; 0x64
 8003126:	fb00 f303 	mul.w	r3, r0, r3
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	3332      	adds	r3, #50	; 0x32
 8003130:	4a07      	ldr	r2, [pc, #28]	; (8003150 <UART_SetConfig+0x118>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	f003 020f 	and.w	r2, r3, #15
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	440a      	add	r2, r1
 8003142:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003144:	bf00      	nop
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40013800 	.word	0x40013800
 8003150:	51eb851f 	.word	0x51eb851f

08003154 <__libc_init_array>:
 8003154:	b570      	push	{r4, r5, r6, lr}
 8003156:	2600      	movs	r6, #0
 8003158:	4d0c      	ldr	r5, [pc, #48]	; (800318c <__libc_init_array+0x38>)
 800315a:	4c0d      	ldr	r4, [pc, #52]	; (8003190 <__libc_init_array+0x3c>)
 800315c:	1b64      	subs	r4, r4, r5
 800315e:	10a4      	asrs	r4, r4, #2
 8003160:	42a6      	cmp	r6, r4
 8003162:	d109      	bne.n	8003178 <__libc_init_array+0x24>
 8003164:	f000 f822 	bl	80031ac <_init>
 8003168:	2600      	movs	r6, #0
 800316a:	4d0a      	ldr	r5, [pc, #40]	; (8003194 <__libc_init_array+0x40>)
 800316c:	4c0a      	ldr	r4, [pc, #40]	; (8003198 <__libc_init_array+0x44>)
 800316e:	1b64      	subs	r4, r4, r5
 8003170:	10a4      	asrs	r4, r4, #2
 8003172:	42a6      	cmp	r6, r4
 8003174:	d105      	bne.n	8003182 <__libc_init_array+0x2e>
 8003176:	bd70      	pop	{r4, r5, r6, pc}
 8003178:	f855 3b04 	ldr.w	r3, [r5], #4
 800317c:	4798      	blx	r3
 800317e:	3601      	adds	r6, #1
 8003180:	e7ee      	b.n	8003160 <__libc_init_array+0xc>
 8003182:	f855 3b04 	ldr.w	r3, [r5], #4
 8003186:	4798      	blx	r3
 8003188:	3601      	adds	r6, #1
 800318a:	e7f2      	b.n	8003172 <__libc_init_array+0x1e>
 800318c:	080031f0 	.word	0x080031f0
 8003190:	080031f0 	.word	0x080031f0
 8003194:	080031f0 	.word	0x080031f0
 8003198:	080031f4 	.word	0x080031f4

0800319c <memset>:
 800319c:	4603      	mov	r3, r0
 800319e:	4402      	add	r2, r0
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d100      	bne.n	80031a6 <memset+0xa>
 80031a4:	4770      	bx	lr
 80031a6:	f803 1b01 	strb.w	r1, [r3], #1
 80031aa:	e7f9      	b.n	80031a0 <memset+0x4>

080031ac <_init>:
 80031ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ae:	bf00      	nop
 80031b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031b2:	bc08      	pop	{r3}
 80031b4:	469e      	mov	lr, r3
 80031b6:	4770      	bx	lr

080031b8 <_fini>:
 80031b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ba:	bf00      	nop
 80031bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031be:	bc08      	pop	{r3}
 80031c0:	469e      	mov	lr, r3
 80031c2:	4770      	bx	lr
